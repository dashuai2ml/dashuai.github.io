<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangxu&#39;s blog</title>
  
  <subtitle>HZX</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jshpy.cn/"/>
  <updated>2018-08-12T14:06:52.038Z</updated>
  <id>http://jshpy.cn/</id>
  
  <author>
    <name>张旭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第4周ARTS</title>
    <link href="http://jshpy.cn/ARTS/ARTS04.html"/>
    <id>http://jshpy.cn/ARTS/ARTS04.html</id>
    <published>2018-08-10T06:01:04.919Z</published>
    <updated>2018-08-12T14:06:52.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p>给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。</p><p>示例：</p><p>给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()</p><p>sumRange(0, 2) -&gt; 1<br>sumRange(2, 5) -&gt; -1<br>sumRange(0, 5) -&gt; -3<br>说明:</p><p>你可以假设数组不可变。<br>会多次调用 sumRange 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=j;k++)&#123;</span><br><span class="line">            sum = sum+<span class="keyword">this</span>.nums[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>分享文章：<a href="https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_35/index.html" target="_blank" rel="noopener">The Golden Rule of API Design</a></p><p>在设计API时应该考虑到使用它时的情况，并站在使用者角度编写API代码的单元测试。</p><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><p>总结下SpringBoot的一些注解</p><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目启动 Application 上的注解，配置 mybatis 的扫描路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.xxx.dataobject.mapper"</span>)</span><br></pre></td></tr></table></figure></p><p>在<code>@Select</code>等中写sql语句，传入 参数/对象属性/Map的键，通过 <code>#{categoryType}</code>格式化至sql，<code>@Results</code>将查询到的字段和方法返回对象的属性映射起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from product_category where category_type=#&#123;categoryType&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"category_name"</span>, property = <span class="string">"categoryName"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"category_id"</span>, property = <span class="string">"categoryId"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"category_type"</span>, property = <span class="string">"categoryType"</span>),</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">ProductCategory <span class="title">findByCategoryType</span><span class="params">(Integer categoryType)</span></span>;</span><br></pre></td></tr></table></figure></p><p>传入多个参数时需要使用<code>@Param</code>将传入参数和sql中的格式化变量对应起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"update product_category set category_name = #&#123;categoryName&#125; where category_type = #&#123;categoryType&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateCategoryType</span><span class="params">(@Param(<span class="string">"categoryName"</span>)</span> String categoryName, @<span class="title">Param</span><span class="params">(<span class="string">"categoryType"</span>)</span> Integer categoryType)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="自动配置-get-set方法"><a href="#自动配置-get-set方法" class="headerlink" title="自动配置 get/set方法"></a>自动配置 get/set方法</h2><p>引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后可以在类上面加上 <code>@Getter</code> 、<code>@Setter</code>注解自动配置所有成员变量对应方法，<code>@Data</code>是二者都配置。</p><p>加上 <code>@Slf4j</code>注解后可以直接以如下形式输出日志，非常方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.warn(<span class="string">"【登陆校验】会话过期"</span>);</span><br></pre></td></tr></table></figure><h2 id="SpringBoot相关"><a href="#SpringBoot相关" class="headerlink" title="SpringBoot相关"></a>SpringBoot相关</h2><p>加上这两个注解的配置类，可以从 application.yml等配置文件中加载配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"some-config"</span>)</span><br></pre></td></tr></table></figure></p><p><code>@Component</code>和<code>@Bean</code>配合使用，实现对某类的自动化配置，如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatMpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WechatAccountConfig accountConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxMpService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WxMpService wxMpService = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        wxMpService.setWxMpConfigStorage(wxMpConfigStorage());</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpConfigStorage <span class="title">wxMpConfigStorage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpConfigStorage = <span class="keyword">new</span> WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpConfigStorage.setAppId(accountConfig.getMpAppId());</span><br><span class="line">        wxMpConfigStorage.setSecret(accountConfig.getMpAppSecret());</span><br><span class="line">        <span class="keyword">return</span> wxMpConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@Autowired</code>是将某个依赖注入进来的注解。</p><p>配置在执行某些类方法前后需要所执行的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//类注解</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.imook.sell.controller.Seller*.*(..))"</span>+</span><br><span class="line">              <span class="string">"&amp;&amp;!execution(public * com.imook.sell.controller.SellerUserController.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"verify()"</span>) <span class="comment">//方法注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doVerify</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"verify()"</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//RestController 返回json对象</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 返回模版文件或重定向等</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/wechat"</span>) <span class="comment">//配置整个Controller的路径</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authorize"</span>) <span class="comment">// Controller的方法注解 Get请求</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/create"</span>)  <span class="comment">// Controller的方法注解 Post</span></span><br></pre></td></tr></table></figure><p>参数注解<code>@Valid</code>多用于Post请求提交表单的验证，即该参数对象的属性要通过验证，比如该参数对象的某属性加了<code>@NotEmpty</code>注解，那么他就不能为空。</p><p>参数注解<code>@RequestParam</code>是声明某参数是来自于请求的，也可对该参数设置默认值，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>, defaultValue = <span class="string">"0"</span>) Integer page</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//映射表实体的类</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span> <span class="comment">//某些字段 自动更新</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//字段注解 表的 ID</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span> <span class="comment">//字段注解 自增长</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span>  <span class="comment">//接口返回时不返回该字段</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 拦截异常，自定义返回内容</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellerAuthorizeException.class) <span class="comment">//需要拦截的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//以JSON形式返回</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="comment">//服务层类注解</span></span><br></pre></td></tr></table></figure><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>##如何避免被洗脑</p><p>最近忽然觉得自己挺容易就相信某个观点，作出不符合自己原来设想的某种行为。我认为自己是很容易被洗脑的那一类人，因此专门找了相关资料研究一下，以期之后遇事多加理性思考和分析，作出正确思考以及决策。</p><p>维基百科对洗脑的定义：透过系统性方法，有意图地向别人灌输思想，来匹配操纵者的意愿，一连串的手法与过程，称为洗脑。</p><p>查找了以下洗脑的一般手段</p><h3 id="信息控制"><a href="#信息控制" class="headerlink" title="信息控制"></a>信息控制</h3><ul><li>只提供单一信息来源，限制对信息的接触以及获取的渠道</li><li>先讲一些据对正确的观点获取信任，而后再让你相信错误的观点</li><li>制造稀缺资源，形成竞争，并通过掌握这种稀缺资源及其评价标准来让别人服从</li><li>利用对某一突发状况的惊魂未定，这时更有可能产生服从、盲信和对权威的喜好</li></ul><p>对于上述手段的免疫技巧：<strong>辩证的思考问题</strong>，这个观点真的是对的吗？反对的人会怎么反驳？<strong>怀疑权威</strong>–讲真话的人不一定是对的。<strong>不盲从</strong>，思考是否有何别人竞争的必要。<strong>遇事不慌，冷静思考</strong>，身正不怕影子斜。</p><h3 id="行为干预"><a href="#行为干预" class="headerlink" title="行为干预"></a>行为干预</h3><ul><li>去个体化，强调集体角色，导致个体行为被集体角色化：统一制服、齐喊口号、朗读誓言，让人处于高昂的情绪中被情绪左右。</li><li>先让某人违背自己的意愿去做一些事，然后通过其做的这些事最终改变他的意愿：仪式化–强迫你做无意义的行为</li><li>周围的人说一样的话，做一样的事情，而你为了融入群体不得不表现得一样，最终被洗脑。</li></ul><p>免疫技巧：思考自己做的事是<strong>自己人格</strong>的体现，还是<strong>集体</strong>的体现？要知道，<strong>做任何非你本来意愿的事情都会最终使你改变态度</strong>。遇到只允许有一个正确的、不允许怀疑的答案，把“观点的对立”上升为“人的对立”时要小心。</p><h3 id="人格摧毁"><a href="#人格摧毁" class="headerlink" title="人格摧毁"></a>人格摧毁</h3><ul><li>有“先喝茶再喝酒的饭局”，请谨慎，它们是具备“硫喷妥钠效果”的神奇组合。</li><li>摧毁自尊体系，摧毁诚实体系，通过一定的服从来赢得“恩惠”，最终进入“习得性无助”的状态–面对现实完全无望而且无可奈何</li><li>制造极端恐惧事件来迅速改变性格。</li></ul><p>到这一阶，基本属于丧失人身自由，任人摆布的状态，我很担心经历过这些是否还能真的不被洗脑。只能说在这个过程中，你要尽量理解对方的意图，要明白他们这样做的目的，只是为了控制你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;p&gt;给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元
      
    
    </summary>
    
      <category term="ARTS" scheme="http://jshpy.cn/categories/ARTS/"/>
    
    
      <category term="ARTS" scheme="http://jshpy.cn/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>第3周ARTS</title>
    <link href="http://jshpy.cn/ARTS/ARTS03.html"/>
    <id>http://jshpy.cn/ARTS/ARTS03.html</id>
    <published>2018-08-04T09:50:29.982Z</published>
    <updated>2018-08-05T14:46:40.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串形式的非负整数 <code>num1</code> 和 <code>num2</code> ，计算它们的和。</p><p>注意：</p><p><code>num1</code> 和 <code>num2</code> 的长度都小于 5100.<br><code>num1</code> 和 <code>num2</code> 都只包含数字 0-9.<br><code>num1</code> 和 <code>num2</code> 都不包含任何前导零。<br>你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将0到9字符的 ASCII 码按顺序存放到一个数组中，那么相应的 ASCII码值对应的索引就是真正的数字可以做转换之用。</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] numArray1 = num1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] numArray2 = num2.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> currentNum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> currentNum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : numArray1) &#123;</span><br><span class="line">            currentNum1 = currentNum1 * <span class="number">10</span> + <span class="keyword">this</span>.codeToNum((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : numArray2) &#123;</span><br><span class="line">            currentNum2 = currentNum2 * <span class="number">10</span> + <span class="keyword">this</span>.codeToNum((<span class="keyword">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span> + (currentNum1 + currentNum2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">codeToNum</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] strToNum = &#123;<span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strToNum.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (code == strToNum[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>分享文章：<a href="https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/thing_76/index.html" target="_blank" rel="noopener">The Single Responsibility Principle</a></p><p>本文阐述了，一个良好的设计应该具备的一个基本原则：<strong>单一职责原则</strong></p><blockquote><p>将因相同原因而改变的的功能聚集在一起，将因不同原因而改变的功能分开。</p></blockquote><p>确切的说，就是一个功能模块只做一件事，并且把它做好。这意味着可以将我们的系统分成可独立部署的组件，组件与组件之间的状态不会互相影响，如果有需要更改某个组件并不需要重新部署其他组件。</p><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><h2 id="内网穿透的通俗理解"><a href="#内网穿透的通俗理解" class="headerlink" title="内网穿透的通俗理解"></a>内网穿透的通俗理解</h2><p>最近看了微信公众平台的授权相关内容，但是想要在本机调试的话需要做内网穿透的工作，通过查阅资料实现了相关功能，借此总结下自己对于内网穿透粗浅的理解。</p><p>平日里我们访问的网站，背后都有服务器在支撑服务，而我们之所以能访问这台服务器是因为我们能在互联网中定位到他的IP地址。</p><p>这个IP是运营商分配的<code>公网IP地址</code>，在网络中是独一无二的，但是这样的IP资源很宝贵，不能无节制的分配。</p><p>但是很多机器都需要联网，怎么办？</p><p>回想下家里联网的场景，路由器通过拨号向运营商申请到了一个<code>公网IP地址</code>（下一次拨号还会变化），家里所有联网设备都通过这个IP地址和互联网上的其他设备通信。</p><p>与此同时路由器把自己与家中其他通过有线或无限的连接到路由器的设备组成了一个局域网，在这个局域网中每个设备都有一个自己的<code>私有IP地址</code>。</p><p>路由器在这个局域网中的扮演的是网关的角色，其他设备网络请求和接受的流量都由路由器转发，因此路由器像是家里水网的总闸门，对于外部网络设备而言家里的局域网是个黑盒子，只有<code>公网IP地址</code>是可见的。</p><p>对于网站服务器来说本机IP就是<code>公网IP地址</code>，那么我开个服务，告诉别人IP地址和端口号人家就可以访问了。</p><p>但对于家里的电脑就不一样了，别人不可能通过这个<code>私有IP地址</code>访问你发布的服务，因为它在网络中并不惟一，很可能隔壁二毛家的电脑IP和你的一样。</p><p>那如果非要别人访问怎么办，有没有解决方案？</p><p>有，方案之一是借助一个拥有<code>公网IP地址</code>的服务器来做转发工作，提供这种转发服务（内网穿透技术）的有花生壳、ngrok等等，他们通常是有一整套客户端和服务端通信的系统。服务端安装在用来转发的服务器上，与内网你家电脑的客户端通过约定的协议通信，这样别人想要访问你电脑的服务只要固定的找这个转发服务器就可以了，IP也是固定不变的。</p><p>转发服务器通常会分配一个二级或三级域名给到你，这个域名是和你的客户端绑定的，这样你打开电脑上的客户端后，别人就可以通过这个域名将其解析至转发服务器，而后转发服务器再找到你的客户端最终完成内网的穿透。</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>最近和同事聊天，聊到一个话题：如果你正在恋爱的对象遭到父母反对，应该怎么办？</p><p>他主张：婚恋不只是两个人的事，更是是两个家庭的的融合，应该听从父母的建议。</p><p>表面上这个问题是一个站队的问题，一边是你更照顾父母意见关心家庭融洽，另一边是你更在意和恋爱对象之间的关系。</p><p>但其实如果真的发生了这种事则是暗示了你和父母之间的关系出了点问题。</p><p>我们来思考一个问题：父母为什么干预你选择婚恋对象？</p><p>当然他们有很多为你好的理由，比如：</p><ul><li>我们是一家人，父母不会害你。</li><li>你现在还年轻现在做的决定不觉得，将来是会后悔的。</li></ul><p>这套背后有两个潜在的逻辑：</p><ul><li>父母其实并不真正了解你的恋爱对象，可能仅仅从他们不满意的点比如家庭背景、距离远近或者身高样貌直接一票否定。</li><li>他们不满意，就不允许你们在一起，这本质想要要掌控子女的未来。</li></ul><p>这是很可怕的，可怕在于父母必须要你顺从他们的意愿，他们还把你当作那个听话的小孩子。在可预见的将来，他们可不仅仅要干预你的择偶，很有可能还会干预你找工作、换工作、买房子，将来结婚的婚后生活他们很可能还要插一脚，指指点点。</p><p>而你很可能在从前的生活中，从来没有真正的反抗过父母的意愿。</p><p>这就是问题所在：</p><blockquote><p>你一直是个听话的孩子，父母也习惯了你的听话，之后你长大了对待某个问题你有自己的看法（很明显你们某些观念上出现了分歧），但是父母反对，你会继续顺从？还是坚决和他们说一声：“我自己可以做主！”？</p></blockquote><p>而事实上已然我们已经长成了一个成年人，我们比父母那一代接受更好的教育，拥有顺应新时代发展的价值观念，我们有足够的信息去判断一个人是否能陪伴自己度过下半生。那么当真正找到这样一个人，又为何让父母用他们的陈旧观念把你束缚住呢？</p><p>我的建议是和父母坦白：</p><blockquote><p>我知道你们都是为我好，但是我不是以前的那个小孩子了，有些事情上，你们的意见和我出现了分歧，作为家人我会慎重考虑你们的建议。但我希望你们明白一件事，我有自己的想法我也相信自己的判断，不管怎样事情最后的觉定权都在我身上，你们不能陪我一辈子，我的人生还是我自己来掌控比较稳妥。</p></blockquote><p>当你真正和父母敞开心扉拿出诚意沟通时，我相信大多数情况是父母会真的觉得你长大了。比较好的情况是那个站队的问题你两边都得到了，但如果父母还是想干预，咋办？这时千万不要心软，因为你不亮出你的决心，不为自己人生选择权争取，那就还是证明你依旧是那个小孩子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="ARTS" scheme="http://jshpy.cn/categories/ARTS/"/>
    
    
      <category term="ARTS" scheme="http://jshpy.cn/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>第2周ARTS</title>
    <link href="http://jshpy.cn/ARTS/ARTS02.html"/>
    <id>http://jshpy.cn/ARTS/ARTS02.html</id>
    <published>2018-07-26T03:30:25.103Z</published>
    <updated>2018-07-29T09:55:35.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p><p>示例：</p><p>给定 <code>&quot;abcabcbb&quot;</code> ，没有重复字符的最长子串是 <code>&quot;abc&quot;</code> ，那么长度就是3。</p><p>给定 <code>&quot;bbbbb&quot;</code> ，最长的子串就是 <code>&quot;b&quot;</code> ，长度是1。</p><p>给定 <code>&quot;pwwkew&quot;</code> ，最长子串是 <code>&quot;wke&quot;</code> ，长度是3。请注意答案必须是一个子串，<code>&quot;pwke&quot;</code> 是 子序列  而不是子串。</p><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> windowsSize = s.length() - <span class="number">1</span>; windowsSize &gt;= <span class="number">1</span>; windowsSize--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - windowsSize; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                HashSet&lt;Character&gt; characterHashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                String subString = s.substring(i, windowsSize + i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">char</span> c : subString.toCharArray()) &#123;</span><br><span class="line">                    characterHashSet.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (windowsSize == characterHashSet.size()) &#123;</span><br><span class="line">                    System.out.printf(<span class="string">"最长不重复子串之一：%s%n"</span>, subString);</span><br><span class="line">                    <span class="keyword">return</span> windowsSize;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>依旧是陈皓老师推荐的文章“<a href="http://www.developerknowhow.com/1091/the-history-of-character-encoding" target="_blank" rel="noopener">The history of Character Encoding</a>”。</p><p>本文介绍了字符编码的发展演进历史，从单字节的<code>ASCII</code>、<code>ISO</code>编码方案，到多字节的<code>Unicode</code>、<code>UTF-8</code>。</p><p>最后对<code>UTF-8</code>工作原理做了通俗的陈述，并给出一些例子展示了不同编码方式收发字符会出现的一些问题。</p><h1 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h1><p>这两天看了些<code>tensorflow</code>的知识点，这里分享一点心得。</p><p>最直观的感受，和以往编程最大的不同是，数据不是实时操控的。</p><p>编码的过程实际上是在用程序构造一个<code>计算图</code>，这个计算图定义了处理数据、模型创建、训练、验证、测试等等一系列行为。</p><p>这个计算图有一个入口，就是我们的数据集，当我们把数据喂到这个图中，一切就按照我们预先等一好的那样运转起来，直至最后给出结果。</p><p>用一个图来直观感受下：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/tensors_flowing.gif" alt="pic"></p><p>那也就是说，我们在定义图的过程中，用到的基础的数据结构它并不是“真实”的，更像是一个约定，等到数据经过这真实的计算才会发生。</p><p>来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant(<span class="number">3.0</span>, dtype=tf.float32)</span><br><span class="line">b = tf.constant(<span class="number">4.0</span>) <span class="comment"># also tf.float32 implicitly</span></span><br><span class="line">total = a + b</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><p>通常我们以为程序会直接打印出a、b的值和求和的结果total，然而实际输出是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tensor(<span class="string">"Const:0"</span>, shape=(), dtype=float32)</span><br><span class="line">Tensor(<span class="string">"Const_1:0"</span>, shape=(), dtype=float32)</span><br><span class="line">Tensor(<span class="string">"add:0"</span>, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><p><code>tensorflow</code>只是描述了“有两个变量a、b，total是他们的和”，并没有立即计算结果。</p><p>如果要让这个图运行起来需要提供一个运行时的会话<code>tf.Session</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(total))</span><br></pre></td></tr></table></figure><p>这时程序才会输出预期的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.0</span></span><br></pre></td></tr></table></figure></p><p>更直观的我们构建图的时候指定占位符<code>tf.placeholder</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line">z = x + y</span><br></pre></td></tr></table></figure></p><p><code>placeholder</code>承诺在稍后提供值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(z, feed_dict=&#123;x: <span class="number">3</span>, y: <span class="number">4.5</span>&#125;))</span><br></pre></td></tr></table></figure></p><p>程序输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.5</span></span><br></pre></td></tr></table></figure></p><p>由此可见，<code>tensorflow</code>和常规的编码习惯有稍许的不同，我猜想这样的好处是，由于机器学习对算力的要求很高，实际部署项目运行并不会在单机上进行计算，引入<code>session</code>的机制可以控制任务在分布式的集群上协调计算，而事先我们只要提供一个运算大纲也就是<code>计算图</code>就可以了。</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p>上周的分享环节，我引用了逻辑思维一期节目的观点，但是总觉得那不是自己的思考，这周我想自己就某个契机陈述自己的思考，但是动笔的时候发现写不出来，或是写的东西很糙，没有发展下去的空间。</p><p>我觉得这是我的一个弱项，归根到底是独立思考的能力。</p><p>平日里的生活，就没有针对特定现象做深度思考的习惯，时间长了脑袋就不具备分析深刻问题的能力了，还好我意识到这一点，那这周的分享我就用来立一个flag。</p><p><strong>在接下来的一周，尝试就身边或社会上某个事件或现象思考背后的本质原因，如果可能给出更好的解决方案并陈述理由。</strong></p><p>算是把这个目标作为我的一项思维训练，在此过程顺便锻炼自己的语言组织、描述想法以及文本创作的能力。</p><p>希望我能借着ARTS把它坚持下来，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Algorithm&quot;&gt;&lt;a href=&quot;#Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Algorithm&quot;&gt;&lt;/a&gt;Algorithm&lt;/h1&gt;&lt;h2 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="ARTS" scheme="http://jshpy.cn/categories/ARTS/"/>
    
    
      <category term="ARTS" scheme="http://jshpy.cn/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>第1周ARTS</title>
    <link href="http://jshpy.cn/ARTS/ARTS01.html"/>
    <id>http://jshpy.cn/ARTS/ARTS01.html</id>
    <published>2018-07-21T05:29:00.419Z</published>
    <updated>2018-07-23T01:54:48.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近参加<a href="https://coolshell.cn/haoel" target="_blank" rel="noopener">陈皓</a>老师的专栏活动，每周一篇ARTS，即：</p><ul><li>algorithm -&gt; 一个算法题</li><li>review -&gt; 点评一篇英文技术文章</li><li>tip -&gt; 学习一个技术技巧</li><li>share -&gt; 分享一个有观点和思考的文章</li></ul><p>至少坚持一年。</p><p>我是一个菜鸡，之前没有接触过JAVA，最近跟着专栏才开始学习，希望自己可以在这个活动中能够打牢基础，学好英语，期待自己的变化。</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>说来惭愧，我没有系统的学习过算法知识，第一周先来个简单的题尝尝，后面再接再厉。</p><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">twoSum</span><span class="params">(List&lt;Integer&gt; nums, Integer target)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums==<span class="keyword">null</span>&amp;&amp;nums.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Integer sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;nums.size(); j++)&#123;</span><br><span class="line">                sum = nums.get(i) + nums.get(j);</span><br><span class="line">                <span class="keyword">if</span> (sum==target)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"&gt;&gt; nums["</span>+i+<span class="string">"] + nums["</span>+j+<span class="string">"] = "</span>+target+<span class="string">""</span>);</span><br><span class="line">                    result.add(i);</span><br><span class="line">                    result.add(j);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>想到两种方法：</p><ul><li>一种是从给定的数组入手两两遍历，如果满足条件就返回结果。</li><li>另一种将target拆分成不同的两两组合，看每单个数是否存在于数组，若两个数都存在且索引可以不等，返回结果。</li></ul><p>考虑到如果target比较大，数组元素却很少，无效的步骤会很多，所以选择实现第一种。</p><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>英文文章我就先从专栏正式入门篇推荐的”<a href="http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/" target="_blank" rel="noopener">The Key To Accelerating Your Coding Skills</a>“文章开始吧^_^。</p><p>由于我英文不是很好，可以说很不好，顺带我把生词也记录下来了。</p><h3 id="点评："><a href="#点评：" class="headerlink" title="点评："></a>点评：</h3><p>本文主要论述了，“拐点”对于我们学习编码的关键作用。</p><p>通过拐点意味着：</p><ul><li>能够独力解决问题，发现新问题的解决方案</li><li>拥有扎实的开发技能</li><li>具备深厚的数据结构、算法的基础</li></ul><p>需要具备的素质：</p><ul><li>注重细节，不怕犯错</li><li>足够的编码量</li><li>抱有终身学习的心态对待编程</li><li>寻求突破，不要呆在舒适区</li><li>自力更生，通过互联网找到学习材料</li><li>尽可能的复用代码</li><li>勇于挑战难题</li></ul><p>在学习任何一门语言或是技术的时候快速通过拐点是我们的首要目标，在此过程中要保证自己清醒的工作状态，不要过度劳累，否则事倍功半。</p><p>文中有一句话很酷，和大家分享下：</p><p> <img src="http://165.227.208.227/posts/wp-content/uploads/2015/04/learn-to-code-1.jpg" alt="pic"></p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>最近需要连接到某个数据库，但是由于防护墙限制只能从一个特定的主机上连接，而这个主机是无UI界面的Linux系统。</p><p>那么有没有一款命令行式的MYSQL客户端呢？有的，我找到了<a href="https://github.com/dbcli/mycli" target="_blank" rel="noopener">mycli</a>，它有直观的语法突出显示，你可以用它方便的操作自己的数据库。</p><p>如果恰好有<code>Python</code>的环境，可以用以下指令轻松安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install mycli</span><br></pre></td></tr></table></figure><p>或者下载源码后:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python setup.py install</span><br></pre></td></tr></table></figure><p>其他的平台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew update &amp;&amp; brew install mycli  # macOS</span><br><span class="line"><span class="meta">$</span> sudo apt-get install mycli # debian or ubuntu</span><br></pre></td></tr></table></figure><p>安装好后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mycli --help</span><br></pre></td></tr></table></figure><p>可以看到帮助信息</p><pre><code>Usage: mycli [OPTIONS] [DATABASE]A MySQL terminal client with auto-completion and syntax highlighting.Examples:    - mycli my_database    - mycli -u my_user -h my_host.com my_database    - mycli mysql://my_user@my_host.com:3306/my_databaseOptions:-h, --host TEXT               Host address of the database.-P, --port INTEGER            Port number to use for connection. Honors                                $MYSQL_TCP_PORT.-u, --user TEXT               User name to connect to the database.-S, --socket TEXT             The socket file to use for connection.-p, --password TEXT           Password to connect to the database.--pass TEXT                   Password to connect to the database.--ssl-ca PATH                 CA file in PEM format.--ssl-capath TEXT             CA directory.--ssl-cert PATH               X509 cert in PEM format.--ssl-key PATH                X509 key in PEM format.--ssl-cipher TEXT             SSL cipher to use.--ssl-verify-server-cert      Verify server&apos;s &quot;Common Name&quot; in its cert                                against hostname used when connecting. This                                option is disabled by default.-V, --version                 Output mycli&apos;s version.-v, --verbose                 Verbose output.-D, --database TEXT           Database to use.-d, --dsn TEXT                Use DSN configured into the [alias_dsn]                                section of myclirc file.--list-dsn                    list of DSN configured into the [alias_dsn]                                section of myclirc file.-R, --prompt TEXT             Prompt format (Default: &quot;\t \u@\h:\d&gt; &quot;).-l, --logfile FILENAME        Log every query and its results to a file.--defaults-group-suffix TEXT  Read MySQL config groups with the specified                                suffix.--defaults-file PATH          Only read MySQL options from the given file.--myclirc PATH                Location of myclirc file.--auto-vertical-output        Automatically switch to vertical output mode                                if the result is wider than the terminal                                width.-t, --table                   Display batch output in table format.--csv                         Display batch output in CSV format.--warn / --no-warn            Warn before running a destructive query.--local-infile BOOLEAN        Enable/disable LOAD DATA LOCAL INFILE.--login-path TEXT             Read this path from the login file.-e, --execute TEXT            Execute command and quit.--help                        Show this message and exit.</code></pre><p>根据提示连接后，就可以用你熟知的SQL操作数据库啦：</p><pre><code>Version: 1.17.0Chat: https://gitter.im/dbcli/mycliMail: https://groups.google.com/forum/#!forum/mycli-usersHome: http://mycli.netThanks to the contributor - Steve Robbinsmysql wptest@127.0.0.1:wptest&gt; show tables;                                                        share                                        show     [F3] Multiline: OFF    Right-arrow to complete suggestion </code></pre><h2 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h2><p>本次分享我在得到APP上听罗胖讲的一个观点：什么叫会工作</p><h3 id="工作的本质是协作"><a href="#工作的本质是协作" class="headerlink" title="工作的本质是协作"></a>工作的本质是协作</h3><p>在学校的学习更多需要靠自己的努力，当工作之后更多是需要与他人和社会进行广泛和深度的协作。</p><h3 id="什么是协作能力"><a href="#什么是协作能力" class="headerlink" title="什么是协作能力"></a>什么是协作能力</h3><p>在展开之前我们先引入一个词<code>军工六性</code>，讲的是一个军工产品，在保证自身质量过关的前提下，能更大的在系统中发挥它的作用的六个要素，分别是：</p><ul><li>稳定性</li><li>适应性</li><li>安全性</li><li>保障性</li><li>维修性</li><li>测试性</li></ul><p>那<code>军工六性</code>和协作有啥关系？</p><p>如果我们把军工产品看作一个刚毕业的大学生，那么他自身的学问是一方面，怎样与周边的因素沟通协调则取决于更多的一些软素质，一个军品质量过关是前提条件，在此之上如何融合在整个国家的战备系统，对我们很有借鉴意义。</p><p>我们对照一个人在职场环境中的协作把它拆开来看：</p><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><p>就像一把枪，能够稳定的发挥自己的性能，对照到职场环境就是<code>靠谱</code>，靠谱的参照标准：</p><p><strong>凡事有交代，件件有着落，事事有回音。</strong><br><br>这是最简单的社会化要求，能做到这一点算是一个合格的职场人。</p><h4 id="适应性"><a href="#适应性" class="headerlink" title="适应性"></a>适应性</h4><p>一把枪，不论在沙漠还是沼泽，不管是严寒还是酷热的条件下都能使用，这就是适应性，对应到工作就是我们周遭环境的变化：</p><ul><li>客户方</li><li>资源方</li><li>用户</li><li>技术</li><li>媒体</li></ul><p>这桩桩件件都是很大的变量，具有不确定性，那如果技术崩溃了、资源方毁约了、用户不满意了你能不能从容应对？</p><p>跨过这个台阶，就是一个人职业化的体现。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>其实就是有没有给别人一种安全感，做事让周边的人放心，和靠谱不同的是，是别人把事情交付过来他会觉得放心了。并不是说要求我们什么事都能解决掉，而是事情交到你手上他不会落到地上，即使没有把事情办成大家也会相信你已经尽到了自己的努力。</p><p>过了这个台阶，基本上就具备团队领导的素质了。</p><h4 id="保障性"><a href="#保障性" class="headerlink" title="保障性"></a>保障性</h4><p>对军工产品来说，战事发生了，能不能短时间批量的投放到战场？生产的各个环节从原料到加工能不能快速的运作起来？这就是保障性。</p><p>对应到工作中就是，是否能协同资源打一场战役。这需要对时间和节奏有很大的把握，需要知道在什么时间什么地方需要投入怎样的资源。</p><p>跨过这个台阶，就基本具备负责一条业务线的能力了，差不多是副总的级别。</p><h4 id="维修性"><a href="#维修性" class="headerlink" title="维修性"></a>维修性</h4><p>一把枪，能不能方便的拆卸，快速找到代替的配件？这就是维修性。对应到职场就是你能不能对发展趋势作出预料、给出预案、快速反应、持续交付的能力。</p><p>这个能力台阶对应CEO。</p><h4 id="测试性"><a href="#测试性" class="headerlink" title="测试性"></a>测试性</h4><p>测试是对维修性的升级要求，一把枪，是好是坏一眼就能看出来，手机还能用大概多长时间，看到电量指示就会明白，也就是具备某种指标让外界能够了解你的状态，从而间接的满足了测试性。</p><p>对应到工作，就是你这活干的咋样，能不能干成，不仅要让别人知道，还要让别人能够评估，不仅能够组织协作，还能吸引和整合资源，这可以说是一种个人品牌。</p><p>具备这个能力，就可以创业了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文借助军工产品的六个特性，把人职业能力划分为六个台阶，分别是：</p><ul><li>靠谱</li><li>职业化</li><li>让合作者放心</li><li>组织战役</li><li>着眼未来</li><li>协同资源</li></ul><p>在这个过程中，不需要追求什么名利、升职、加薪，随着能力的提升，该是你的东西一样都不会拉下。</p><p>与大家共勉，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近参加&lt;a href=&quot;https://coolshell.cn/haoel&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="ARTS" scheme="http://jshpy.cn/categories/ARTS/"/>
    
    
      <category term="ARTS" scheme="http://jshpy.cn/tags/ARTS/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib简单上手</title>
    <link href="http://jshpy.cn/%E5%8F%AF%E8%A7%86%E5%8C%96/matplotlib%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B.html"/>
    <id>http://jshpy.cn/可视化/matplotlib简单上手.html</id>
    <published>2018-07-01T09:33:13.594Z</published>
    <updated>2018-07-16T09:27:20.579Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结自<a href="https://www.imooc.com/video/14982" target="_blank" rel="noopener">途索</a>的慕课网课程，增加了些自己的理解。</p><p>matplotlib 是一个优秀的数据可视化库，可以很方便的使用<code>Python</code>生成方便我们分析的数据图表，一起来看看吧。</p><h2 id="导入必要的包"><a href="#导入必要的包" class="headerlink" title="导入必要的包"></a>导入必要的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>如果是在<code>jupyter</code>中操作，可以使用<code>%matplotlib inline</code>这个魔术方法，它会将<code>matplotlib</code>绘制的图表显示在记事本中，方便直观的浏览。</p><p>同时我们还导入了<code>numpy</code>，它是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><h2 id="准备绘图数据"><a href="#准备绘图数据" class="headerlink" title="准备绘图数据"></a>准备绘图数据</h2><p>下面我们用它来生成一些绘图需要的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br></pre></td></tr></table></figure></p><p><code>linspace</code>方法指定均匀的生成256个从-pi到pi之间的点，返回一个<code>np.array</code>形式的数组。</p><p>见名知意，<code>np.cos(x)</code>和 <code>np.sin(x)</code>是对<code>x</code>做了余弦和正弦的计算，并同样返回数组。</p><h2 id="开始画图"><a href="#开始画图" class="headerlink" title="开始画图"></a>开始画图</h2><p>有了数据我们开始画图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>)  <span class="comment"># 当作是新建一个画布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在画布上画两个图形</span></span><br><span class="line">plt.plot(x, c)  <span class="comment"># x是横轴，c是纵轴</span></span><br><span class="line">plt.plot(x, s)</span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-5355f3d24a2dd77d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p><h2 id="丰富我们的图形"><a href="#丰富我们的图形" class="headerlink" title="丰富我们的图形"></a>丰富我们的图形</h2><p>当然，让面只是一个最简单的例子，实际操作时我们需要更多的标注信息，来时我们绘制的图形更易读。</p><h3 id="线形、颜色和标题"><a href="#线形、颜色和标题" class="headerlink" title="线形、颜色和标题"></a>线形、颜色和标题</h3><p>在我们原来的代码上做些许修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">'red'</span>, linestyle=<span class="string">'-'</span>, label=<span class="string">'sin'</span>)  <span class="comment"># label 后面绘制图例用</span></span><br><span class="line">plt.plot(x, c, <span class="string">'b--'</span>, label=<span class="string">'cos'</span>)  <span class="comment"># b* 同时表示颜色和线型</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin&amp;cos'</span>) <span class="comment"># 添加title信息</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-20c6f4af4c964d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><h3 id="移动坐标轴"><a href="#移动坐标轴" class="headerlink" title="移动坐标轴"></a>移动坐标轴</h3><p>看起来好多了， 可是坐标轴在两侧有点别扭，我们把它挪到中间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取轴编辑器</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 将图像的上边框和右边框隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"><span class="comment"># 将图像的下边框和左边框设置到数据域的0位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-7841f6c73274b5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><h3 id="修改坐标值，添加图例"><a href="#修改坐标值，添加图例" class="headerlink" title="修改坐标值，添加图例"></a>修改坐标值，添加图例</h3><p>看起来不错，不过横轴看不出来我们的绘制点和<code>pi</code>有啥关系，我们需要修改下单位信息，同时把图例加上。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定五个点，使用laText，编辑公式并显示</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>,<span class="string">r'$-\pi/2$'</span>,<span class="string">r'$0$'</span>,<span class="string">r'$\pi/2$'</span>,<span class="string">r'$\pi$'</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)  <span class="comment"># 根据label显示的图例相对于画面的位置</span></span><br><span class="line">plt.grid()  <span class="comment"># 显示网格线</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-0925659213edc1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p><p>至此我们画了一个比较可观的图形了，下面是完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">'red'</span>, linestyle=<span class="string">'-'</span>, label=<span class="string">'sin'</span>)  <span class="comment"># label 后面绘制图例用</span></span><br><span class="line">plt.plot(x, c, <span class="string">'b--'</span>, label=<span class="string">'cos'</span>)  <span class="comment"># b* 同时表示颜色和线型</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin&amp;cos'</span>) <span class="comment"># 添加title信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取轴编辑器</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像的上边框和右边框隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像的下边框和左边框设置到数据域的0位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定五个点，使用laText，编辑公式并显示</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>,<span class="string">r'$-\pi/2$'</span>,<span class="string">r'$0$'</span>,<span class="string">r'$\pi/2$'</span>,<span class="string">r'$\pi$'</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="散点图的绘制"><a href="#散点图的绘制" class="headerlink" title="散点图的绘制"></a>散点图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">fig.add_subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>)  <span class="comment"># 将图像分割成三行三列，画在第一个区域中</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)  <span class="comment"># 生成随机高斯分布，0是均值，1是标准差，生成128个</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line"></span><br><span class="line">T = np.arctan2(Y, X)  <span class="comment"># 上色用</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">10</span>, c=T)  <span class="comment"># s表示点的大小， c是颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制轴的范围</span></span><br><span class="line">plt.axis([<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>])  <span class="comment"># [xmin, xmax, ymin, ymax]</span></span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'scatter'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-88b329e13a9314df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p><h2 id="柱状图的绘制"><a href="#柱状图的绘制" class="headerlink" title="柱状图的绘制"></a>柱状图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line">fig.add_subplot(<span class="number">332</span>) <span class="comment"># 等价于 (3,3,2)</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">X = np.arange(n)</span><br><span class="line"></span><br><span class="line">Y1 = (<span class="number">1</span>-X/float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line">Y2 = (<span class="number">1</span>-X/float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加注释</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y1):</span><br><span class="line">    plt.text(x, y, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y2):</span><br><span class="line">    plt.text(x, -y, <span class="string">'%.2f'</span> % -y, ha=<span class="string">'center'</span>, va=<span class="string">'top'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-05807540d4bf72ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 饼图</span></span><br><span class="line">fig.add_subplot(<span class="number">333</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Z = np.ones(n)</span><br><span class="line">Z[<span class="number">-1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.pie(Z, colors=[<span class="string">'%.2f'</span> % (i/float(n)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)], </span><br><span class="line">        labels=[<span class="string">'%.2f'</span> % (i/float(n)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line"></span><br><span class="line">plt.gca().set_aspect(<span class="string">'equal'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'pie'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-e91adf936ad6e990.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7"></p><h2 id="绘制极坐标图"><a href="#绘制极坐标图" class="headerlink" title="绘制极坐标图"></a>绘制极坐标图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 极坐标</span></span><br><span class="line">fig.add_subplot(<span class="number">334</span>, polar=<span class="keyword">True</span>)  <span class="comment"># 画图用的是plot， 所以指定polar</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">theta = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">2</span>*np.pi/n)</span><br><span class="line">radii = <span class="number">10</span>*np.random.rand(n)</span><br><span class="line"></span><br><span class="line">plt.plot(theta, radii) </span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'polar'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-dd0b8ff39f1a6062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8"></p><h2 id="热图"><a href="#热图" class="headerlink" title="热图"></a>热图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热图</span></span><br><span class="line">fig.add_subplot(<span class="number">335</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm  <span class="comment"># 上色用</span></span><br><span class="line">cmap = cm.Blues</span><br><span class="line"></span><br><span class="line">data = np.random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(data, cmap=cmap)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'heatmap'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-6beb59d87858551b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9"></p><h2 id="3D图"><a href="#3D图" class="headerlink" title="3D图"></a>3D图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  <span class="comment"># 引入三维坐标系</span></span><br><span class="line">fig.add_subplot(<span class="number">336</span>, projection=<span class="string">'3d'</span>)  <span class="comment"># 设置三维画布</span></span><br><span class="line"></span><br><span class="line">X = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">Y = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">Z = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y,Z)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-3dceff91b299f587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10"></p><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热力图</span></span><br><span class="line">fig.add_subplot(<span class="number">313</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - Y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line"></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line"></span><br><span class="line">plt.contourf(X, Y, f(X,  Y), cmap=plt.cm.hot)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-47c9ce930229980c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好啦，至此我们用<code>matplotlib</code>绘制了大多数的图形样式，并且使用了绘制子图的方式，将其绘制在同一个画布中，相信你已经可以根据自己的需求绘制相应的图形了。</p><p>最后如果我们想要保存绘制好的图形可以这样操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">'./fig.png'</span>)</span><br></pre></td></tr></table></figure><p>在项目目录下就会的到保存的图片啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文总结自&lt;a href=&quot;https://www.imooc.com/video/14982&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;途索&lt;/a&gt;的慕课网课程，增加了些自己的理解。&lt;/p&gt;
&lt;p&gt;matplotlib 是一个优秀的数据可视化库，可以
      
    
    </summary>
    
      <category term="可视化" scheme="http://jshpy.cn/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="matplotlib" scheme="http://jshpy.cn/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>短文本分类之构建词向量</title>
    <link href="http://jshpy.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%9F%AD%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E6%9E%84%E5%BB%BA%E8%AF%8D%E5%90%91%E9%87%8F.html"/>
    <id>http://jshpy.cn/机器学习/短文本分类构建词向量.html</id>
    <published>2018-07-01T09:33:13.594Z</published>
    <updated>2018-07-16T09:27:28.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><p>我的目标是利用tenserflow得到一个可以对新闻标题进行准确分类的分类器。</p><p>首先我需要有新闻标题的原始数据，因此我从今日头条抓取了近十万条新闻标题用于接下来的训练工作。</p><p>得到原始标题数据后，我需要对其进行分词构建语料库，分词我使用<code>jieba</code>这个第三方库。</p><p>之后要通过语料库用Word2vec算法对分词进行训练，这里我使用<code>gensim</code>的<code>word2vec</code>。</p><p><strong>梳理下准备条件：</strong></p><ul><li>原始新闻标题数据</li><li>jiaba</li><li>gensim</li></ul><h2 id="生成语料文件"><a href="#生成语料文件" class="headerlink" title="生成语料文件"></a>生成语料文件</h2><p>我抓取的数据存放在MYSQL，因此我将查询出标题进行分词后写入语料文件：<code>yuliao.txt</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">path = sys.path[<span class="number">0</span>]</span><br><span class="line">yuliao_path = os.path.join(path, <span class="string">'yuliao.txt'</span>) <span class="comment"># 生成语料的路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_biaodian</span><span class="params">(cnt)</span>:</span></span><br><span class="line">    pat = <span class="string">r'[！？｡＂＃＄％＆＇（）＊＋，－／：；＜＝＞＠［＼］＾＿｀｛｜｝～｟｠｢｣､、〃《》「」『』【】〔〕〖〗〘〙〚〛〜〝〞〟〰〾〿–—‘’‛“”„‟…‧﹏.]+|[!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@\[\\\]\^\_\`\&#123;\|\&#125;\~0-9]+'</span><span class="comment">#去标点</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(pat, <span class="string">''</span>, cnt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_kong</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">' '</span> <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title_handle</span><span class="params">(title)</span>:</span></span><br><span class="line">    <span class="comment"># 去除标点符号</span></span><br><span class="line">    title = filter_biaodian(title)</span><br><span class="line">    title = <span class="string">' '</span>.join(list(filter(filter_kong, jieba.lcut(title)))) + <span class="string">' '</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">'''</span></span><br><span class="line"><span class="string">        select title from ToutiaoNews</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    res = db.execute_sql(sql)</span><br><span class="line">    <span class="keyword">with</span> open(yuliao_path, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> res:</span><br><span class="line">            title = title_handle(title[<span class="number">0</span>])</span><br><span class="line">            fp.write(title)</span><br></pre></td></tr></table></figure><p>虽然<code>jieba</code>分词已经很不错了，但是对于某些热门新词和人名等还是不够准确，所以有必要自定义一些词汇提供给<code>jieba</code>。</p><p>我在<code>user_dict.txt</code>中定义了一些<code>jieba</code>没有正确分出来的词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C罗</span><br><span class="line">王思聪</span><br><span class="line">陈意涵</span><br><span class="line">王晶</span><br><span class="line">四驱</span><br><span class="line">杨超越</span><br><span class="line">高颖浠</span><br><span class="line">李子璇</span><br><span class="line">热依娜</span><br><span class="line">摩拜</span><br><span class="line">发威</span><br><span class="line">余额宝</span><br><span class="line">小鲜肉</span><br></pre></td></tr></table></figure></p><p>然后加载到我们的程序中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载自定义字典</span></span><br><span class="line">dict_path = os.path.join(path, <span class="string">"user_dict.txt"</span>)</span><br><span class="line">jieba.load_userdict(dict_path)</span><br></pre></td></tr></table></figure><p>执行<code>load_data</code>方法便会生成语料文件。</p><h2 id="训练和保存模型"><a href="#训练和保存模型" class="headerlink" title="训练和保存模型"></a>训练和保存模型</h2><p>导入<code>gensim</code>，加载我们的语料文件，开始训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec </span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型文件存放路径</span></span><br><span class="line">model_path = os.path.join(path, <span class="string">"word2vec_model.bin"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'加载语料文件...'</span>)</span><br><span class="line">    sentences =word2vec.Text8Corpus(yuliao_path)  <span class="comment"># 加载语料  </span></span><br><span class="line">    print(<span class="string">'模型训练中...'</span>)</span><br><span class="line">    model =word2vec.Word2Vec(sentences, size=<span class="number">200</span>)  <span class="comment">#训练skip-gram模型，默认window=5  </span></span><br><span class="line">    <span class="comment"># 保存模型，以便重用  </span></span><br><span class="line">    print(<span class="string">'保存模型文件中...'</span>)</span><br><span class="line">    model.save(model_path)</span><br></pre></td></tr></table></figure><p>训练好模型保存为文件，下次可以直接从文件导入，不必再进行训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_word2vec_model</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    加载训练好的模型</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'加载模型文件...'</span>)</span><br><span class="line">    <span class="keyword">return</span> word2vec.Word2Vec.load(model_path) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_most_similar</span><span class="params">(words)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    测试输出最相关的20个词</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    model = load_word2vec_model()</span><br><span class="line">    y2 = model.most_similar(words, topn=<span class="number">20</span>)  <span class="comment"># 20个最相关的  </span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"-------------"</span>)</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt; 和 &#123;&#125; 最相关的20个词:\n'</span>.format(words))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> y2:  </span><br><span class="line">        print(item[<span class="number">0</span>], item[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"-------------"</span>)</span><br></pre></td></tr></table></figure><p>我们看下模型的效果，运行<code>print_most_similar</code>测试方法，输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>和 人工智能 最相关的<span class="number">20</span>个词:</span><br><span class="line"></span><br><span class="line">前景 <span class="number">0.9870855212211609</span></span><br><span class="line">应用 <span class="number">0.986504077911377</span></span><br><span class="line">推动 <span class="number">0.9858032464981079</span></span><br><span class="line">观察 <span class="number">0.9855602979660034</span></span><br><span class="line">机器人 <span class="number">0.9849052429199219</span></span><br><span class="line">共享 <span class="number">0.9845559000968933</span></span><br><span class="line">展锐 <span class="number">0.9841729402542114</span></span><br><span class="line">发展趋势 <span class="number">0.9837538599967957</span></span><br><span class="line">指数 <span class="number">0.9834417700767517</span></span><br><span class="line">金服 <span class="number">0.9829524159431458</span></span><br><span class="line">进一步 <span class="number">0.9829222559928894</span></span><br><span class="line">高质量 <span class="number">0.9827390909194946</span></span><br><span class="line">解读 <span class="number">0.9825021624565125</span></span><br><span class="line">趋势 <span class="number">0.9823193550109863</span></span><br><span class="line">实体 <span class="number">0.9820591807365417</span></span><br><span class="line">各大 <span class="number">0.9819753170013428</span></span><br><span class="line">物流 <span class="number">0.9819672107696533</span></span><br><span class="line">生态 <span class="number">0.9815815687179565</span></span><br><span class="line">房地产 <span class="number">0.981529712677002</span></span><br><span class="line">运营 <span class="number">0.9815083742141724</span></span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p>效果还可以，如果语料再多一点会更好。</p><h2 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h2><p>训练好的模型相近意思的词在向量空间中的位置也是相似的，这样我们依据词向量做分类训练，本质上是将相近意思的句子归类。</p><p>当然最终我们要得到某个词的向量表示形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = load_word2vec_model()</span><br><span class="line">    print(&apos;model type:&apos;, type(model))</span><br><span class="line">    print(model[&apos;ofo&apos;])    </span><br><span class="line">    print(&apos;model size of ofo:&apos;, len(model[&apos;ofo&apos;]))</span><br><span class="line">    print(&apos;the type of an element of the ofo:&apos;, type(model[&apos;ofo&apos;][0]))</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">加载模型文件...</span><br><span class="line">--&gt; model type: &lt;class &apos;gensim.models.word2vec.Word2Vec&apos;&gt;</span><br><span class="line">[-0.12093621  0.21866739  0.0476281   0.15949744 -0.2265305  -0.08501934</span><br><span class="line">  0.1477401  -0.00190862 -0.03246938 -0.06177654  0.14871995  0.19064938</span><br><span class="line">  0.20575511 -0.12488797  0.18135293  0.17202124 -0.09171224 -0.21369526</span><br><span class="line">  0.03578532 -0.08414337 -0.04215271 -0.07621672  0.22449629  0.0337574</span><br><span class="line"> -0.01039878  0.01468771  0.15081759  0.09702738 -0.33268988  0.11885371</span><br><span class="line"> -0.16769075  0.09913398 -0.0534218   0.15699175 -0.10522668  0.02929186</span><br><span class="line">  0.15697408  0.10360114 -0.22695963 -0.09760883 -0.06047406  0.20749298</span><br><span class="line">  0.16786923 -0.32377186 -0.0979296   0.23040165 -0.06727723  0.2789535</span><br><span class="line"> -0.05251723  0.05750585  0.04498681 -0.19886209 -0.14110063 -0.43698636</span><br><span class="line">  0.31315592 -0.0539036   0.18757886 -0.12233631  0.25112468 -0.12556228</span><br><span class="line"> -0.19618745  0.23073478  0.09799167 -0.09279976 -0.13416637 -0.30544615</span><br><span class="line">  0.20916344  0.18377133 -0.20380071  0.06745876  0.22611332 -0.11335444</span><br><span class="line"> -0.30527177 -0.0248933   0.01644903 -0.09095342  0.17283195 -0.11239095</span><br><span class="line"> -0.01026074 -0.11678243 -0.20007738 -0.00843141  0.12541942  0.08090381</span><br><span class="line">  0.13402799 -0.25427282  0.00226124 -0.11637224 -0.07989754  0.09807675</span><br><span class="line"> -0.01441371 -0.13024434 -0.15721492 -0.21402866  0.04589665 -0.06763294</span><br><span class="line"> -0.17075238 -0.07745436  0.0095577  -0.38303027  0.07163925  0.38283527</span><br><span class="line">  0.25002772  0.32608908  0.13308333  0.24943127  0.03098303  0.03559564</span><br><span class="line"> -0.05252191 -0.01458469  0.14649096  0.17111804  0.1398329  -0.06161319</span><br><span class="line">  0.0758339   0.01116067 -0.1789481  -0.39118966  0.02592629  0.11360105</span><br><span class="line"> -0.12705195 -0.09707507  0.20374824  0.20948473  0.189067   -0.08490008</span><br><span class="line">  0.03691229 -0.03789151  0.09222446  0.36308745 -0.11168318  0.04258949</span><br><span class="line"> -0.04875926 -0.06543283 -0.05993763 -0.21278009  0.15429844 -0.03047387</span><br><span class="line">  0.08654932 -0.27806106  0.13747326 -0.3273331  -0.18196188 -0.20869672</span><br><span class="line">  0.19920668  0.16047722 -0.22706664  0.14389433  0.12567239 -0.2691268</span><br><span class="line"> -0.20942092 -0.0147821  -0.14789784 -0.04505106 -0.17953952  0.00555091</span><br><span class="line"> -0.02158411  0.21042849 -0.10467305 -0.01584556 -0.08712497  0.01285077</span><br><span class="line">  0.13214627 -0.05077496  0.20669343  0.25896493  0.14283897 -0.06721289</span><br><span class="line"> -0.13196066 -0.04882697  0.02222396  0.00217219  0.11299089 -0.09901663</span><br><span class="line"> -0.15670624 -0.13901645  0.1034102   0.15072429  0.42944327  0.02470743</span><br><span class="line">  0.11724957  0.09513479 -0.1651883   0.12621285  0.17963493  0.09137619</span><br><span class="line">  0.02091281 -0.04587717  0.0837699  -0.14793368  0.13413116  0.01136413</span><br><span class="line"> -0.31699035  0.03399559  0.06288019 -0.05555357  0.11239031 -0.07564677</span><br><span class="line">  0.08233534  0.1478644 ]</span><br><span class="line">--&gt; model size of ofo: 200</span><br><span class="line">--&gt; the type of an element of the ofo: &lt;class &apos;numpy.float32&apos;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期工作&quot;&gt;&lt;a href=&quot;#前期工作&quot; class=&quot;headerlink&quot; title=&quot;前期工作&quot;&gt;&lt;/a&gt;前期工作&lt;/h2&gt;&lt;p&gt;我的目标是利用tenserflow得到一个可以对新闻标题进行准确分类的分类器。&lt;/p&gt;
&lt;p&gt;首先我需要有新闻标题的原始数据
      
    
    </summary>
    
      <category term="机器学习" scheme="http://jshpy.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="word2vec" scheme="http://jshpy.cn/tags/word2vec/"/>
    
  </entry>
  
  <entry>
    <title>Hive常用操作</title>
    <link href="http://jshpy.cn/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"/>
    <id>http://jshpy.cn/大数据/Hive常用操作.html</id>
    <published>2018-02-03T07:13:02.000Z</published>
    <updated>2018-07-16T09:27:15.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="简单的建表"><a href="#简单的建表" class="headerlink" title="简单的建表"></a>简单的建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line">spec_table_from_textfile(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  table_common <span class="keyword">string</span>,</span><br><span class="line">  column_code <span class="keyword">string</span>,</span><br><span class="line">  column_name <span class="keyword">string</span>,</span><br><span class="line">  column_common <span class="keyword">string</span>)</span><br></pre></td></tr></table></figure><h3 id="从查询结果创建表"><a href="#从查询结果创建表" class="headerlink" title="从查询结果创建表"></a>从查询结果创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table2</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> phone_num,real_name,id_card,create_time </span><br><span class="line"><span class="keyword">from</span> table1 </span><br><span class="line"><span class="keyword">where</span> info_from <span class="keyword">like</span> <span class="string">'%18%'</span></span><br></pre></td></tr></table></figure><h3 id="克隆表"><a href="#克隆表" class="headerlink" title="克隆表"></a>克隆表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">like</span> tablename1</span><br></pre></td></tr></table></figure><ul><li>此处是指克隆表结构，并不会克隆表数据。</li></ul><h3 id="创建从格式化文本文件导入的表"><a href="#创建从格式化文本文件导入的表" class="headerlink" title="创建从格式化文本文件导入的表"></a>创建从格式化文本文件导入的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line">spec_table_from_textfile(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  table_common <span class="keyword">string</span>,</span><br><span class="line">  column_code <span class="keyword">string</span>,</span><br><span class="line">  column_name <span class="keyword">string</span>,</span><br><span class="line">  column_common <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile</span><br></pre></td></tr></table></figure><h3 id="创建-orc-表"><a href="#创建-orc-表" class="headerlink" title="创建 orc 表"></a>创建 orc 表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line">spec_table_orc(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  table_common <span class="keyword">string</span>,</span><br><span class="line">  column_code <span class="keyword">string</span>,</span><br><span class="line">  column_name <span class="keyword">string</span>,</span><br><span class="line">  column_common <span class="keyword">string</span>)</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="keyword">id</span>) <span class="keyword">into</span> <span class="number">3</span> buckets</span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc TBLPROPERTIES (<span class="string">'transactional'</span>=<span class="string">'true'</span>)</span><br></pre></td></tr></table></figure><ul><li>ORC表支持行级delete、updata和insert等操作，但需要配置HIVE相关配置文件，具体操作点击<a href="http://blog.csdn.net/wzy0623/article/details/51483674" target="_blank" rel="noopener">链接</a>。</li></ul><h2 id="导入数据至表"><a href="#导入数据至表" class="headerlink" title="导入数据至表"></a>导入数据至表</h2><p>Hive表接受批量插入，一般不支持逐条记录插入的<code>insert</code>SQL语句。</p><h3 id="从查询数据导入"><a href="#从查询数据导入" class="headerlink" title="从查询数据导入"></a>从查询数据导入</h3><p>若目标表和数据源表的表结构一至：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> xx <span class="keyword">select</span> * <span class="keyword">from</span> xx <span class="keyword">where</span> xxx</span><br></pre></td></tr></table></figure><ul><li>字段数据结构不一致Hive会尝试转换，转换不了的置<code>NULL</code></li></ul><h3 id="导入时指定特殊值"><a href="#导入时指定特殊值" class="headerlink" title="导入时指定特殊值"></a>导入时指定特殊值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">spec_test(</span><br><span class="line">  <span class="keyword">id</span>,</span><br><span class="line">  table_code,</span><br><span class="line">  table_name,</span><br><span class="line">  filed_code,</span><br><span class="line">  filed_name,</span><br><span class="line">  <span class="keyword">category</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *,<span class="string">'zx'</span></span><br><span class="line"><span class="keyword">from</span> spec_table2</span><br></pre></td></tr></table></figure><ul><li>一种适用的场景是在表合并时，对目标表新增的字段指定来源。</li></ul><h3 id="选择字段导入"><a href="#选择字段导入" class="headerlink" title="选择字段导入"></a>选择字段导入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span></span><br><span class="line">table1(</span><br><span class="line">  wp_id,</span><br><span class="line">  wp_phone,</span><br><span class="line">  wp_email,</span><br><span class="line">  wp_sex,</span><br><span class="line">  wp_birthday)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table2</span><br></pre></td></tr></table></figure><h3 id="从文本文件导入"><a href="#从文本文件导入" class="headerlink" title="从文本文件导入"></a>从文本文件导入</h3><p>如上一小节<strong>创建从格式化文本文件导入的表</strong>，对应的建表后可在<code>hive-shell</code>中指定文本文件路径导入，需要注意的是文本文件中字段和字段之间的分隔符必须和建表语句中指定的一至：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="built_in">local</span> inpath <span class="string">'/home/hive/zx/spec_table_from_textfile.txt'</span> into table spec_table_from_textfile</span><br></pre></td></tr></table></figure><h2 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h2><p>与常见的SQL查询语句类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> spec_table <span class="keyword">where</span> table_name <span class="keyword">like</span> <span class="string">'xx%'</span> <span class="keyword">and</span> table_name <span class="keyword">like</span> <span class="string">'00%'</span> <span class="keyword">limit</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改名"><a href="#修改名" class="headerlink" title="修改名"></a>修改名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">name</span> old_name <span class="keyword">to</span> new_name</span><br></pre></td></tr></table></figure><h3 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> spec_table2 <span class="keyword">add</span> <span class="keyword">columns</span> (<span class="keyword">category</span> <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><ul><li>在尾部增加</li></ul><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> spec_table2</span><br><span class="line"><span class="keyword">replace</span> <span class="keyword">columns</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  filed_code <span class="keyword">string</span>,</span><br><span class="line">  filed_name <span class="keyword">string</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>注：这个语句只是修改表结构并不会对数据进行操作，如果表中已经存在数据，你删除一个字段后再恢复会发现数据还在，同样如果你改变字段顺序，会发现数据错位了。</p><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> xx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;h3 id=&quot;简单的建表&quot;&gt;&lt;a href=&quot;#简单的建表&quot; class=&quot;headerlink&quot; title=&quot;简单的建表&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="大数据" scheme="http://jshpy.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hive" scheme="http://jshpy.cn/tags/Hive/"/>
    
      <category term="SQL" scheme="http://jshpy.cn/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS 环境搭建</title>
    <link href="http://jshpy.cn/WEB/HTTPS%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>http://jshpy.cn/WEB/HTTPS 环境搭建.html</id>
    <published>2018-01-16T15:33:06.000Z</published>
    <updated>2018-07-16T09:27:18.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><ol><li>登录阿里云管理控制台</li><li>CA证书服务 -&gt; 购买证书</li><li>选择 <code>免费型DV SSL</code> 品牌 <code>Symantec</code></li><li>购买 -&gt; 支付</li><li>回到<code>步骤2</code>证书服务控制台</li><li>补全域名信息</li><li>等待审核成功</li></ol><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><ol><li>登录证书服务控制台，找到到对应证书点击<code>下载</code>。</li><li>得到两个证书文件：<code>214448811130415.key</code>、 <code>214448811130415.pem</code></li><li>在Nginx安装目录下创建一个文件夹将其放入，我这里是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Guitar cert]# pwd</span><br><span class="line">/etc/nginx/cert</span><br><span class="line">[root@Guitar cert]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 1679 Jan 16 22:20 213989769950415.key</span><br><span class="line">-rw-r--r-- 1 root root 3297 Jan 16 22:20 213989769950415.pem</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改配置文件-nginx-conf"><a href="#修改配置文件-nginx-conf" class="headerlink" title="修改配置文件 nginx.conf"></a>修改配置文件 nginx.conf</h2><p>将原来注释的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#    listen       443 ssl;</span></span><br><span class="line"><span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line"><span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    location / &#123;</span></span><br><span class="line"><span class="comment">#        root   html;</span></span><br><span class="line"><span class="comment">#        index  index.html index.htm;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  api.xiuni.club;</span><br><span class="line">    ssl          on;</span><br><span class="line">    root /wechat/www;</span><br><span class="line">    index index.html; </span><br><span class="line">    ssl_certificate   /etc/nginx/cert/213989769950415.pem;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/213989769950415.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        root /wechat/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理静态资源:</span></span><br><span class="line">    location ~ ^\/static\/.*$ &#123;</span><br><span class="line">        root /wechat/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 动态请求转发到9000端口:</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment">#     proxy_pass       http://127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header Host $host;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到刚才上传的证书文件路径也要对应的配置上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate   /etc/nginx/cert/213989769950415.pem;</span><br><span class="line">ssl_certificate_key  /etc/nginx/cert/213989769950415.key;</span><br></pre></td></tr></table></figure><ul><li>也可以根据再自己的情况添加必要的配置</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>重启Nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>https://your.domain.com</code> 可以正常发起https请求</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;申请证书&quot;&gt;&lt;a href=&quot;#申请证书&quot; class=&quot;headerlink&quot; title=&quot;申请证书&quot;&gt;&lt;/a&gt;申请证书&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;登录阿里云管理控制台&lt;/li&gt;
&lt;li&gt;CA证书服务 -&amp;gt; 购买证书&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;
      
    
    </summary>
    
      <category term="WEB" scheme="http://jshpy.cn/categories/WEB/"/>
    
    
      <category term="HTTPS" scheme="http://jshpy.cn/tags/HTTPS/"/>
    
      <category term="证书" scheme="http://jshpy.cn/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy实用技巧</title>
    <link href="http://jshpy.cn/%E7%88%AC%E8%99%AB/scrapy%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7.html"/>
    <id>http://jshpy.cn/爬虫/scrapy实用技巧.html</id>
    <published>2017-12-27T16:00:00.000Z</published>
    <updated>2018-07-16T09:27:25.786Z</updated>
    
    <content type="html"><![CDATA[<p>在使用scrapy过程中总结了一些小技巧，在此分享出来供大家参考。</p><h2 id="用-LinkExtractor-收取链接"><a href="#用-LinkExtractor-收取链接" class="headerlink" title="用 LinkExtractor 收取链接"></a>用 LinkExtractor 收取链接</h2><p>以 <a href="http://www.hao123.com/sitemap" target="_blank" rel="noopener">http://www.hao123.com/sitemap</a> 为例子：</p><p>在shell中运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://www.hao123.com/sitemap</span><br></pre></td></tr></table></figure><p>进入shell调试模式，我们来看看使用linkextractors的效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>links = LinkExtractor(allow=(), restrict_xpaths=(<span class="string">'//a[@class="link"]'</span>)).extract_links(response)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(links)</span><br><span class="line"><span class="number">113</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> link <span class="keyword">in</span> links[:<span class="number">10</span>]:</span><br><span class="line"><span class="meta">... </span>    print(link.text.replace(<span class="string">'\n'</span>,<span class="string">''</span>),<span class="string">':'</span>,link.url)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line">天气 : http://tianqi.hao123.com/</span><br><span class="line">万年历 : http://www.hao123.com/rili</span><br><span class="line">地图 : http://www.hao123.com/map</span><br><span class="line">查询 : http://life.hao123.com/info</span><br><span class="line">生活 : http://www.hao123.com/shenghuo</span><br><span class="line">hao到家 : http://life.hao123.com/</span><br><span class="line">美食菜谱 : http://www.hao123.com/menu</span><br><span class="line">特价 : http://tejia.hao123.com/?tn=kztj</span><br><span class="line">购物 : http://gouwu.hao123.com/</span><br><span class="line">团购 : https://www.nuomi.com/?utm_source=hao123&amp;utm_medium=channel_midright&amp;cid=001606</span><br></pre></td></tr></table></figure><p>利用Xpath，可以很方便的获取到链接的文本和URL</p><h2 id="命令行调试代码"><a href="#命令行调试代码" class="headerlink" title="命令行调试代码"></a>命令行调试代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line">inspect_response(response, self)</span><br></pre></td></tr></table></figure><p>在需要调试的地方插入此代码，程序运行过程中会停在该处，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2018-05-28 10:29:14 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2018-05-28 10:29:14 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">&gt;&gt;&gt; [s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x10549dfd0&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET https://movie.douban.com/chart&gt;</span><br><span class="line">[s]   response   &lt;200 https://movie.douban.com/chart&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x10549def0&gt;</span><br><span class="line">[s]   spider     &lt;TestSpider &apos;test&apos; at 0x1055e1748&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   view(response)    View response in a browser</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>此时可以针对返回的<code>response</code>进行调试工作。</p><h2 id="重写-start-requests-方法"><a href="#重写-start-requests-方法" class="headerlink" title="重写 start_requests 方法"></a>重写 start_requests 方法</h2><p>我们知道在编写spider的时候都有一个初始URL列表，也即<code>start_urls</code>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackOverflowSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'stackoverflow'</span></span><br><span class="line">    start_urls = [<span class="string">'http://stackoverflow.com/questions?sort=votes'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.question-summary h3 a::attr(href)'</span>):</span><br><span class="line">            full_url = response.urljoin(href.extract())</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(full_url, callback=self.parse_question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_question</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'title'</span>: response.css(<span class="string">'h1 a::text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'votes'</span>: response.css(<span class="string">'.question .vote-count-post::text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'body'</span>: response.css(<span class="string">'.question .post-text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'tags'</span>: response.css(<span class="string">'.question .post-tag::text'</span>).extract(),</span><br><span class="line">            <span class="string">'link'</span>: response.url,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>但有时我们希望灵活的把初始URL分配给不同的回调函数，这时我们可以重写<code>Spider</code>类的<code>start_requests</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    ershoufang = <span class="string">"https://nj.5i5j.com/ershoufang/o6/"</span></span><br><span class="line">    zufang = <span class="string">"https://nj.5i5j.com/zufang/o6/"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> Request(ershoufang, callback=self.parse_ershoufang,dont_filter = <span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">yield</span> Request(zufang, callback=self.parse_zufang,dont_filter = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>当然你还可以基于这个方法做一个URL和parse的映射，这样就可以在一个爬虫下处理不同类型的页面。</p><h2 id="Request-meta-特殊键"><a href="#Request-meta-特殊键" class="headerlink" title="Request.meta 特殊键"></a>Request.meta 特殊键</h2><p><code>Request.meta</code>属性可以包含任何任意数据，也就意味着除了<code>Scrapy</code>及其内置扩展的一些特殊键，我们可以自定义一些对我们有用的键用于在请求和响应间传递，拿官方示例的 <code>cookiejar</code> 来说。</p><p>Scrapy通过使用 cookiejar Request meta key来支持单spider追踪多cookie session。 默认情况下其使用一个cookie jar(session)，不过您可以传递一个标示符来使用多个。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> enumerate(urls):</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(<span class="string">"http://www.example.com"</span>, meta=&#123;<span class="string">'cookiejar'</span>: i&#125;,</span><br><span class="line">        callback=self.parse_page)</span><br></pre></td></tr></table></figure><p>需要注意的是 cookiejar meta key不是”黏性的(sticky)”。 您需要在之后的request请求中接着传递。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="comment"># do some processing</span></span><br><span class="line">    <span class="keyword">return</span> scrapy.Request(<span class="string">"http://www.example.com/otherpage"</span>,</span><br><span class="line">        meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;,</span><br><span class="line">        callback=self.parse_other_page)</span><br></pre></td></tr></table></figure><p>具体如何使用，就看你的想象力啦。</p><h2 id="给请求添加代理（中间件）"><a href="#给请求添加代理（中间件）" class="headerlink" title="给请求添加代理（中间件）"></a>给请求添加代理（中间件）</h2><p>爬虫不可避免的需要使用代理，我们通过下载器中间件，截获发出的请求把代理信息添加进去。</p><p>以阿布云为例，首先我们需要编辑项目下的<code>middlewares.py</code>文件，新建一个代理中间件类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务器</span></span><br><span class="line">proxyServer = <span class="string">"http://http-dyn.abuyun.com:9020"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理隧道验证信息</span></span><br><span class="line">proxyUser = <span class="string">"H01234567890123D"</span></span><br><span class="line">proxyPass = <span class="string">"0123456789012345"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python2</span></span><br><span class="line"><span class="comment"># proxyAuth = "Basic " + base64.b64encode(proxyUser + ":" + proxyPass)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python3</span></span><br><span class="line">proxyAuth = <span class="string">"Basic "</span> + base64.urlsafe_b64encode(bytes((proxyUser + <span class="string">":"</span> + proxyPass), <span class="string">"ascii"</span>)).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.meta[<span class="string">"proxy"</span>] = proxyServer</span><br><span class="line"></span><br><span class="line">        request.headers[<span class="string">"Proxy-Authorization"</span>] = proxyAuth</span><br></pre></td></tr></table></figure><p>在重写的<code>process_request</code>方法中，我们将必要的信息添加给即将发出的request。</p><p>然后我们还需要在 <code>settings.py</code> 文件中使能我们自定义的代理中间件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'myproject.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们发出的请求scrapy就会自动为我们添加代理信息了。</p><h2 id="Scrapy-动态调试和启动多爬虫"><a href="#Scrapy-动态调试和启动多爬虫" class="headerlink" title="Scrapy 动态调试和启动多爬虫"></a>Scrapy 动态调试和启动多爬虫</h2><p>参见我之前的一篇<a href="http://jshpy.cn/2018/04/15/scrapy%E5%90%AF%E5%8A%A8%E5%A4%9A%E7%88%AC%E8%99%AB/">文章</a></p><h2 id="…-…"><a href="#…-…" class="headerlink" title="… …"></a>… …</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用scrapy过程中总结了一些小技巧，在此分享出来供大家参考。&lt;/p&gt;
&lt;h2 id=&quot;用-LinkExtractor-收取链接&quot;&gt;&lt;a href=&quot;#用-LinkExtractor-收取链接&quot; class=&quot;headerlink&quot; title=&quot;用 LinkExtra
      
    
    </summary>
    
      <category term="爬虫" scheme="http://jshpy.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="http://jshpy.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy实现动态调试和同时启动多个爬虫</title>
    <link href="http://jshpy.cn/%E7%88%AC%E8%99%AB/scrapy%E5%90%AF%E5%8A%A8%E5%A4%9A%E7%88%AC%E8%99%AB.html"/>
    <id>http://jshpy.cn/爬虫/scrapy启动多爬虫.html</id>
    <published>2017-12-14T16:00:00.000Z</published>
    <updated>2018-07-16T09:27:23.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般启动方式"><a href="#一般启动方式" class="headerlink" title="一般启动方式"></a>一般启动方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spider_name</span><br></pre></td></tr></table></figure><p>命令行启动好处是灵活方便, 可以通过传递参数的形式控制爬虫的行为和输出。</p><blockquote><p>参见<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html#id3" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>比如你可以配置爬虫采集到数据的输出方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl dmoz -o items.json</span><br></pre></td></tr></table></figure></p><p>但是它的缺点也很明显:</p><ul><li>原子性太强，不方便动态调试代码</li><li>当需要启动多个爬虫时，不方便操作</li></ul><h2 id="新的思路"><a href="#新的思路" class="headerlink" title="新的思路"></a>新的思路</h2><p>我们知道<code>Scrapy</code>是基于Twisted实现的爬虫框架, 因此我们可以通过引入<code>reactor</code>来启动我们的爬虫。</p><p>为了方便理解，我把的项目结构展示出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── learn_scrapy</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── test.py</span><br><span class="line">├── debug.py</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure><p>我在项目根目录下新建了文件 <code>debug.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> configure_logging</span><br><span class="line"><span class="comment"># 引入spider</span></span><br><span class="line"><span class="keyword">from</span> learn_scrapy.spiders.test <span class="keyword">import</span> TestSpider</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">settings = get_project_settings()</span><br><span class="line">configure_logging(settings)</span><br><span class="line">runner = CrawlerRunner(settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 装载爬虫</span></span><br><span class="line">    runner.crawl(TestSpider)</span><br><span class="line">    <span class="comment"># 如果有多个爬虫需要启动可以一直装载下去</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider2)</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider3)</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider4)</span></span><br><span class="line">    <span class="comment"># ... ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 爬虫结束后停止事件循环</span></span><br><span class="line">    d = runner.join()</span><br><span class="line">    d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动事件循环</span></span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start_spider()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行这个文件<code>python3 debug.py</code>就可以启动爬虫。</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>在IDE下选择启动debug：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/debug_scrapy.png" alt=""></p><p>可以看到程序停在了断点处，可以很方便的查看程序运行时的堆栈和变量信息：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/debug_scrapy2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一般启动方式&quot;&gt;&lt;a href=&quot;#一般启动方式&quot; class=&quot;headerlink&quot; title=&quot;一般启动方式&quot;&gt;&lt;/a&gt;一般启动方式&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="爬虫" scheme="http://jshpy.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="http://jshpy.cn/tags/Scrapy/"/>
    
      <category term="Python3" scheme="http://jshpy.cn/tags/Python3/"/>
    
  </entry>
  
</feed>
