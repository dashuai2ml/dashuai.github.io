<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangxu&#39;s blog</title>
  
  <subtitle>HZX</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.jshpy.cn/"/>
  <updated>2020-04-19T13:59:05.687Z</updated>
  <id>https://blog.jshpy.cn/</id>
  
  <author>
    <name>张旭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Python搭建简单的HTTP服务</title>
    <link href="https://blog.jshpy.cn/%E5%88%86%E4%BA%AB/%E7%94%A8Python%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://blog.jshpy.cn/分享/用Python搭建简单的HTTP服务.html</id>
    <published>2019-12-20T16:00:00.000Z</published>
    <updated>2020-04-19T13:59:05.687Z</updated>
    
    <content type="html"><![CDATA[<p>分享一个快速用Python搭建简单的HTTP服务的方法。</p><p>平时我们可能有需要，传输某个文件到手机，或者工作中某台服务器的电脑。</p><p>假如这个手机是个测试手机/服务器，并没有微信QQ之类的软件，而且你也不想费时去安装及登陆账号，而这个这个时候恰好你的电脑有Python环境，事情一下就简单了许多：</p><ul><li>第一步 打开终端窗口，cd至你想要传输文件的目录。</li><li>第二步 Python3环境，输入<code>python -m http.server 8080</code>；Python2环境，输入<code>python -m SimpleHTTPServer 8080</code>；</li></ul><p>看到如下字样说明服务开启成功：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">8080</span> (http:<span class="comment">//0.0.0.0:8080/) ...</span></span><br></pre></td></tr></table></figure><p>此时用手机或其他电脑浏览器访问本机的IP和端口号即可下载此目录下的相关文件：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/1535288756699.jpg" alt="pic"></p><p>当然手机和电脑要和本机处在同一个本地网络中。</p><p>如果想让外网设备也可以访问，做个内网穿透就可以很方便的实现啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享一个快速用Python搭建简单的HTTP服务的方法。&lt;/p&gt;
&lt;p&gt;平时我们可能有需要，传输某个文件到手机，或者工作中某台服务器的电脑。&lt;/p&gt;
&lt;p&gt;假如这个手机是个测试手机/服务器，并没有微信QQ之类的软件，而且你也不想费时去安装及登陆账号，而这个这个时候恰好你的电
      
    
    </summary>
    
      <category term="分享" scheme="https://blog.jshpy.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="HTTP" scheme="https://blog.jshpy.cn/tags/HTTP/"/>
    
      <category term="Python" scheme="https://blog.jshpy.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>类图的相关概念</title>
    <link href="https://blog.jshpy.cn/%E5%88%86%E4%BA%AB/%E7%B1%BB%E5%9B%BE%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5.html"/>
    <id>https://blog.jshpy.cn/分享/类图的相关概念.html</id>
    <published>2019-10-17T16:00:00.000Z</published>
    <updated>2020-04-19T13:58:53.042Z</updated>
    
    <content type="html"><![CDATA[<p>学了好长时间Java才接触到类图的相关概念，其实我觉得大可在学Java之前就普及相关知识，最近看了相关的东西借此从结下自己的理解。</p><p>我们可以把类图看作我们写程序之前准备的草稿或图纸，不要求我们详尽设计，只是构建出一个相对明晰的整体框架，帮助我们从宏观架构我们的项目。</p><p>类图将类与类之间的关系氛围以下几种：</p><ul><li>实现</li><li>泛化</li><li>聚合</li><li>组合</li><li>关联</li><li>依赖</li></ul><h2 id="实现-泛化"><a href="#实现-泛化" class="headerlink" title="实现 泛化"></a>实现 泛化</h2><p>我觉得可以将它们放在一起来看，因为它们都体现出类的一种继承结构，也即 is-a 的关系，举个例子：自行车是车、猫是动物</p><p>那么在实际的代码中<strong>实现表示继承抽象类</strong>，符号是一条带空心箭头的虚线，箭头方向表示<strong>继承自</strong>，继承自谁就指向谁。</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_realize.jpg" alt="实现"></p><p>泛化，从字面上理解就有推广开来的意味，在实际代码中是继承自非抽象类，符号是带空心箭头的实线。</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalize.jpg" alt="泛化"></p><h2 id="聚合-组合"><a href="#聚合-组合" class="headerlink" title="聚合 组合"></a>聚合 组合</h2><p>其实组合是一种特殊的聚合，区别聚合与组合原则在于：整体不存在时部分是否还存在？</p><p>如果整体不存在时部分还存在，那就是聚合它的整体和部分不是强依赖的，比如羊群解散了羊作为一个独立的个体仍然是存在的，聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A聚合：</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_aggregation.jpg" alt="聚合"></p><p>反之如果整体不存在时部分也不存在了，那就是组合它是一种强依赖的特殊聚合关系，例如：公司不存在了，部门也将不存在了，组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_composition.jpg" alt="组合"></p><h2 id="依赖-关联"><a href="#依赖-关联" class="headerlink" title="依赖 关联"></a>依赖 关联</h2><p>一个对象A在运行期间会用到另一个对象B我们就称作A依赖B，他们之间的关系就是依赖关系。</p><p>显然关联关系也是依赖关系的一种，区别在于关联关系是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的，它一般用来定义对象之间静态的、天然的结构。所以，关联关系是一种“强依赖”的关系；比如学生和学校就是一种关联关系。关联关系是用一条直线表示的默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A：</p><p>关联关系在最终代码中，通常是以成员变量的形式实现的。</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_association.jpg" alt="关联"></p><p>而依赖它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化，依赖关系也可能发生变化。因此在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，因为参数是可以在运行时动态变化的。依赖关系是用一套带箭头的虚线表示的如下图表示A依赖于B：</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_dependency.jpg" alt="依赖"></p><p>由此可见，上面的组合和聚合也是一种依赖，而且是强依赖关系–关联关系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学了好长时间Java才接触到类图的相关概念，其实我觉得大可在学Java之前就普及相关知识，最近看了相关的东西借此从结下自己的理解。&lt;/p&gt;
&lt;p&gt;我们可以把类图看作我们写程序之前准备的草稿或图纸，不要求我们详尽设计，只是构建出一个相对明晰的整体框架，帮助我们从宏观架构
      
    
    </summary>
    
      <category term="分享" scheme="https://blog.jshpy.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="UML" scheme="https://blog.jshpy.cn/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透的通俗理解</title>
    <link href="https://blog.jshpy.cn/%E5%88%86%E4%BA%AB/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3.html"/>
    <id>https://blog.jshpy.cn/分享/内网穿透的通俗理解.html</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2020-04-19T13:59:00.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内网穿透的通俗理解"><a href="#内网穿透的通俗理解" class="headerlink" title="内网穿透的通俗理解"></a>内网穿透的通俗理解</h2><p>最近看了微信公众平台的授权相关内容，但是想要在本机调试的话需要做内网穿透的工作，通过查阅资料实现了相关功能，借此总结下自己对于内网穿透粗浅的理解。</p><p>平日里我们访问的网站，背后都有服务器在支撑服务，而我们之所以能访问这台服务器是因为我们能在互联网中定位到他的IP地址。</p><p>这个IP是运营商分配的<code>公网IP地址</code>，在网络中是独一无二的，但是这样的IP资源很宝贵，不能无节制的分配。</p><p>但是很多机器都需要联网，怎么办？</p><p>回想下家里联网的场景，路由器通过拨号向运营商申请到了一个<code>公网IP地址</code>（下一次拨号还会变化），家里所有联网设备都通过这个IP地址和互联网上的其他设备通信。</p><p>与此同时路由器把自己与家中其他通过有线或无限的连接到路由器的设备组成了一个局域网，在这个局域网中每个设备都有一个自己的<code>私有IP地址</code>。</p><p>路由器在这个局域网中的扮演的是网关的角色，其他设备网络请求和接受的流量都由路由器转发，因此路由器像是家里水网的总闸门，对于外部网络设备而言家里的局域网是个黑盒子，只有<code>公网IP地址</code>是可见的。</p><p>对于网站服务器来说本机IP就是<code>公网IP地址</code>，那么我开个服务，告诉别人IP地址和端口号人家就可以访问了。</p><p>但对于家里的电脑就不一样了，别人不可能通过这个<code>私有IP地址</code>访问你发布的服务，因为它在网络中并不惟一，很可能隔壁二毛家的电脑IP和你的一样。</p><p>那如果非要别人访问怎么办，有没有解决方案？</p><p>有，方案之一是借助一个拥有<code>公网IP地址</code>的服务器来做转发工作，提供这种转发服务（内网穿透技术）的有花生壳、ngrok等等，他们通常是有一整套客户端和服务端通信的系统。服务端安装在用来转发的服务器上，与内网你家电脑的客户端通过约定的协议通信，这样别人想要访问你电脑的服务只要固定的找这个转发服务器就可以了，IP也是固定不变的。</p><p>转发服务器通常会分配一个二级或三级域名给到你，这个域名是和你的客户端绑定的，这样你打开电脑上的客户端后，别人就可以通过这个域名将其解析至转发服务器，而后转发服务器再找到你的客户端最终完成内网的穿透。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内网穿透的通俗理解&quot;&gt;&lt;a href=&quot;#内网穿透的通俗理解&quot; class=&quot;headerlink&quot; title=&quot;内网穿透的通俗理解&quot;&gt;&lt;/a&gt;内网穿透的通俗理解&lt;/h2&gt;&lt;p&gt;最近看了微信公众平台的授权相关内容，但是想要在本机调试的话需要做内网穿透的工作，通过
      
    
    </summary>
    
      <category term="分享" scheme="https://blog.jshpy.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="内网穿透" scheme="https://blog.jshpy.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用命令行式的MYSQL客户端</title>
    <link href="https://blog.jshpy.cn/%E5%88%86%E4%BA%AB/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%8F%E7%9A%84MYSQL%E5%AE%A2%E6%88%B7%E7%AB%AF.html"/>
    <id>https://blog.jshpy.cn/分享/命令行式的MYSQL客户端.html</id>
    <published>2019-02-27T16:00:00.000Z</published>
    <updated>2020-04-19T13:58:56.403Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要连接到某个数据库，但是由于防护墙限制只能从一个特定的主机上连接，而这个主机是无UI界面的Linux系统。</p><p>那么有没有一款命令行式的MYSQL客户端呢？有的，我找到了<a href="https://github.com/dbcli/mycli" target="_blank" rel="noopener">mycli</a>，它有直观的语法突出显示，你可以用它方便的操作自己的数据库。</p><p>如果恰好有<code>Python</code>的环境，可以用以下指令轻松安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install mycli</span></span><br></pre></td></tr></table></figure><p>或者下载源码后:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python setup.py install</span></span><br></pre></td></tr></table></figure><p>其他的平台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew update &amp;&amp; brew install mycli  <span class="comment"># macOS</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install mycli <span class="comment"># debian or ubuntu</span></span></span><br></pre></td></tr></table></figure><p>安装好后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mycli --<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><p>可以看到帮助信息</p><pre><code>Usage: mycli [OPTIONS] [DATABASE]A MySQL terminal client with auto-completion and syntax highlighting.Examples:    - mycli my_database    - mycli -u my_user -h my_host.com my_database    - mycli mysql://my_user@my_host.com:3306/my_databaseOptions:-h, --host TEXT               Host address of the database.-P, --port INTEGER            Port number to use for connection. Honors                                $MYSQL_TCP_PORT.-u, --user TEXT               User name to connect to the database.-S, --socket TEXT             The socket file to use for connection.-p, --password TEXT           Password to connect to the database.--pass TEXT                   Password to connect to the database.--ssl-ca PATH                 CA file in PEM format.--ssl-capath TEXT             CA directory.--ssl-cert PATH               X509 cert in PEM format.--ssl-key PATH                X509 key in PEM format.--ssl-cipher TEXT             SSL cipher to use.--ssl-verify-server-cert      Verify server&apos;s &quot;Common Name&quot; in its cert                                against hostname used when connecting. This                                option is disabled by default.-V, --version                 Output mycli&apos;s version.-v, --verbose                 Verbose output.-D, --database TEXT           Database to use.-d, --dsn TEXT                Use DSN configured into the [alias_dsn]                                section of myclirc file.--list-dsn                    list of DSN configured into the [alias_dsn]                                section of myclirc file.-R, --prompt TEXT             Prompt format (Default: &quot;\t \u@\h:\d&gt; &quot;).-l, --logfile FILENAME        Log every query and its results to a file.--defaults-group-suffix TEXT  Read MySQL config groups with the specified                                suffix.--defaults-file PATH          Only read MySQL options from the given file.--myclirc PATH                Location of myclirc file.--auto-vertical-output        Automatically switch to vertical output mode                                if the result is wider than the terminal                                width.-t, --table                   Display batch output in table format.--csv                         Display batch output in CSV format.--warn / --no-warn            Warn before running a destructive query.--local-infile BOOLEAN        Enable/disable LOAD DATA LOCAL INFILE.--login-path TEXT             Read this path from the login file.-e, --execute TEXT            Execute command and quit.--help                        Show this message and exit.</code></pre><p>根据提示连接后，就可以用你熟知的SQL操作数据库啦：</p><pre><code>Version: 1.17.0Chat: https://gitter.im/dbcli/mycliMail: https://groups.google.com/forum/#!forum/mycli-usersHome: http://mycli.netThanks to the contributor - Steve Robbinsmysql wptest@127.0.0.1:wptest&gt; show tables;                                                        share                                        show     [F3] Multiline: OFF    Right-arrow to complete suggestion </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近需要连接到某个数据库，但是由于防护墙限制只能从一个特定的主机上连接，而这个主机是无UI界面的Linux系统。&lt;/p&gt;
&lt;p&gt;那么有没有一款命令行式的MYSQL客户端呢？有的，我找到了&lt;a href=&quot;https://github.com/dbcli/mycli&quot;
      
    
    </summary>
    
      <category term="分享" scheme="https://blog.jshpy.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="MYSQL" scheme="https://blog.jshpy.cn/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>用Maven导入本地的jar包</title>
    <link href="https://blog.jshpy.cn/Java/%E7%94%A8Maven%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E7%9A%84jar%E5%8C%85.html"/>
    <id>https://blog.jshpy.cn/Java/用Maven导入本地的jar包.html</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-03-06T13:33:42.513Z</updated>
    
    <content type="html"><![CDATA[<p>做个笔记：用Maven导入本地的jar包。</p><p>搜索到好多种解决方案，这里我选择在项目目录下建立本地仓库的做法，这样jar包可以随项目很方便的移动。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><p>首先进入项目根目录（pom.xml的路径），建立一个文件夹，我这里是<code>maven-repository</code>。</p></li><li><p>使用Maven命令安装Jar到这个本地仓库中</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=jar -Durl=file:./maven-repository/ -DrepositoryId=maven-repository -DupdateReleaseInfo=true</span><br></pre></td></tr></table></figure><p>cd到项目根目录执行上面的Maven命令安装。</p><ul><li>path-to-file Jar包的绝对路径，或相对于当前目录的相对路径</li><li>group-id 、artifact-id 、version 顾名思义，按照你的情况填写，其实随便写也没关系。</li></ul><p>等待安装成功可以看到maven-repository目录下按照固定格式生成了一些文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── maven-repository</span><br><span class="line">│   └── org</span><br><span class="line">│       └── local</span><br><span class="line">│           └── patchca</span><br><span class="line">│               ├── 0.5.0</span><br><span class="line">│               │   ├── patchca-0.5.0.jar</span><br><span class="line">│               │   ├── patchca-0.5.0.jar.md5</span><br><span class="line">│               │   ├── patchca-0.5.0.jar.sha1</span><br><span class="line">│               │   ├── patchca-0.5.0.pom</span><br><span class="line">│               │   ├── patchca-0.5.0.pom.md5</span><br><span class="line">│               │   └── patchca-0.5.0.pom.sha1</span><br><span class="line">│               ├── maven-metadata.xml</span><br><span class="line">│               ├── maven-metadata.xml.md5</span><br><span class="line">│               └── maven-metadata.xml.sha1</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><ol start="3"><li>回到我们的<code>pom.xml</code>添加两处内容：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-repository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>file:///$&#123;project.basedir&#125;/maven-repository<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>project.basedir</code>就是我们项目根目录，这里指定本地仓库的路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.local<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>patchca<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正常的引入我们安装的本地依赖，groupId、artifactId、version第一步怎么填的，这里就怎么写。</p><p>这样就引入了本地的Jar包，在项目中就可以可以正常使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做个笔记：用Maven导入本地的jar包。&lt;/p&gt;
&lt;p&gt;搜索到好多种解决方案，这里我选择在项目目录下建立本地仓库的做法，这样jar包可以随项目很方便的移动。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.jshpy.cn/categories/Java/"/>
    
    
      <category term="Maven" scheme="https://blog.jshpy.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy实用技巧</title>
    <link href="https://blog.jshpy.cn/%E7%88%AC%E8%99%AB/scrapy%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7.html"/>
    <id>https://blog.jshpy.cn/爬虫/scrapy实用技巧.html</id>
    <published>2018-12-27T16:00:00.000Z</published>
    <updated>2020-04-19T13:59:19.218Z</updated>
    
    <content type="html"><![CDATA[<p>在使用scrapy过程中总结了一些小技巧，在此分享出来供大家参考。</p><h2 id="用-LinkExtractor-收取链接"><a href="#用-LinkExtractor-收取链接" class="headerlink" title="用 LinkExtractor 收取链接"></a>用 LinkExtractor 收取链接</h2><p>以 <a href="http://www.hao123.com/sitemap" target="_blank" rel="noopener">http://www.hao123.com/sitemap</a> 为例子：</p><p>在shell中运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://www.hao123.com/sitemap</span><br></pre></td></tr></table></figure><p>进入shell调试模式，我们来看看使用linkextractors的效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>links = LinkExtractor(allow=(), restrict_xpaths=(<span class="string">'//a[@class="link"]'</span>)).extract_links(response)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(links)</span><br><span class="line"><span class="number">113</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> link <span class="keyword">in</span> links[:<span class="number">10</span>]:</span><br><span class="line"><span class="meta">... </span>    print(link.text.replace(<span class="string">'\n'</span>,<span class="string">''</span>),<span class="string">':'</span>,link.url)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line">天气 : http://tianqi.hao123.com/</span><br><span class="line">万年历 : http://www.hao123.com/rili</span><br><span class="line">地图 : http://www.hao123.com/map</span><br><span class="line">查询 : http://life.hao123.com/info</span><br><span class="line">生活 : http://www.hao123.com/shenghuo</span><br><span class="line">hao到家 : http://life.hao123.com/</span><br><span class="line">美食菜谱 : http://www.hao123.com/menu</span><br><span class="line">特价 : http://tejia.hao123.com/?tn=kztj</span><br><span class="line">购物 : http://gouwu.hao123.com/</span><br><span class="line">团购 : https://www.nuomi.com/?utm_source=hao123&amp;utm_medium=channel_midright&amp;cid=001606</span><br></pre></td></tr></table></figure><p>利用Xpath，可以很方便的获取到链接的文本和URL</p><h2 id="命令行调试代码"><a href="#命令行调试代码" class="headerlink" title="命令行调试代码"></a>命令行调试代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line">inspect_response(response, self)</span><br></pre></td></tr></table></figure><p>在需要调试的地方插入此代码，程序运行过程中会停在该处，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2018-05-28 10:29:14 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2018-05-28 10:29:14 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">&gt;&gt;&gt; [s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x10549dfd0&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET https://movie.douban.com/chart&gt;</span><br><span class="line">[s]   response   &lt;200 https://movie.douban.com/chart&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x10549def0&gt;</span><br><span class="line">[s]   spider     &lt;TestSpider &apos;test&apos; at 0x1055e1748&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   view(response)    View response in a browser</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>此时可以针对返回的<code>response</code>进行调试工作。</p><h2 id="重写-start-requests-方法"><a href="#重写-start-requests-方法" class="headerlink" title="重写 start_requests 方法"></a>重写 start_requests 方法</h2><p>我们知道在编写spider的时候都有一个初始URL列表，也即<code>start_urls</code>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackOverflowSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'stackoverflow'</span></span><br><span class="line">    start_urls = [<span class="string">'http://stackoverflow.com/questions?sort=votes'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.question-summary h3 a::attr(href)'</span>):</span><br><span class="line">            full_url = response.urljoin(href.extract())</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(full_url, callback=self.parse_question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_question</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'title'</span>: response.css(<span class="string">'h1 a::text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'votes'</span>: response.css(<span class="string">'.question .vote-count-post::text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'body'</span>: response.css(<span class="string">'.question .post-text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'tags'</span>: response.css(<span class="string">'.question .post-tag::text'</span>).extract(),</span><br><span class="line">            <span class="string">'link'</span>: response.url,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>但有时我们希望灵活的把初始URL分配给不同的回调函数，这时我们可以重写<code>Spider</code>类的<code>start_requests</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    ershoufang = <span class="string">"https://nj.5i5j.com/ershoufang/o6/"</span></span><br><span class="line">    zufang = <span class="string">"https://nj.5i5j.com/zufang/o6/"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> Request(ershoufang, callback=self.parse_ershoufang,dont_filter = <span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">yield</span> Request(zufang, callback=self.parse_zufang,dont_filter = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>当然你还可以基于这个方法做一个URL和parse的映射，这样就可以在一个爬虫下处理不同类型的页面。</p><h2 id="Request-meta-特殊键"><a href="#Request-meta-特殊键" class="headerlink" title="Request.meta 特殊键"></a>Request.meta 特殊键</h2><p><code>Request.meta</code>属性可以包含任何任意数据，也就意味着除了<code>Scrapy</code>及其内置扩展的一些特殊键，我们可以自定义一些对我们有用的键用于在请求和响应间传递，拿官方示例的 <code>cookiejar</code> 来说。</p><p>Scrapy通过使用 cookiejar Request meta key来支持单spider追踪多cookie session。 默认情况下其使用一个cookie jar(session)，不过您可以传递一个标示符来使用多个。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> enumerate(urls):</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(<span class="string">"http://www.example.com"</span>, meta=&#123;<span class="string">'cookiejar'</span>: i&#125;,</span><br><span class="line">        callback=self.parse_page)</span><br></pre></td></tr></table></figure><p>需要注意的是 cookiejar meta key不是”黏性的(sticky)”。 您需要在之后的request请求中接着传递。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="comment"># do some processing</span></span><br><span class="line">    <span class="keyword">return</span> scrapy.Request(<span class="string">"http://www.example.com/otherpage"</span>,</span><br><span class="line">        meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;,</span><br><span class="line">        callback=self.parse_other_page)</span><br></pre></td></tr></table></figure><p>具体如何使用，就看你的想象力啦。</p><h2 id="给请求添加代理（中间件）"><a href="#给请求添加代理（中间件）" class="headerlink" title="给请求添加代理（中间件）"></a>给请求添加代理（中间件）</h2><p>爬虫不可避免的需要使用代理，我们通过下载器中间件，截获发出的请求把代理信息添加进去。</p><p>以阿布云为例，首先我们需要编辑项目下的<code>middlewares.py</code>文件，新建一个代理中间件类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务器</span></span><br><span class="line">proxyServer = <span class="string">"http://http-dyn.abuyun.com:9020"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理隧道验证信息</span></span><br><span class="line">proxyUser = <span class="string">"H01234567890123D"</span></span><br><span class="line">proxyPass = <span class="string">"0123456789012345"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python2</span></span><br><span class="line"><span class="comment"># proxyAuth = "Basic " + base64.b64encode(proxyUser + ":" + proxyPass)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python3</span></span><br><span class="line">proxyAuth = <span class="string">"Basic "</span> + base64.urlsafe_b64encode(bytes((proxyUser + <span class="string">":"</span> + proxyPass), <span class="string">"ascii"</span>)).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.meta[<span class="string">"proxy"</span>] = proxyServer</span><br><span class="line"></span><br><span class="line">        request.headers[<span class="string">"Proxy-Authorization"</span>] = proxyAuth</span><br></pre></td></tr></table></figure><p>在重写的<code>process_request</code>方法中，我们将必要的信息添加给即将发出的request。</p><p>然后我们还需要在 <code>settings.py</code> 文件中使能我们自定义的代理中间件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'myproject.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们发出的请求scrapy就会自动为我们添加代理信息了。</p><h2 id="Scrapy-动态调试和启动多爬虫"><a href="#Scrapy-动态调试和启动多爬虫" class="headerlink" title="Scrapy 动态调试和启动多爬虫"></a>Scrapy 动态调试和启动多爬虫</h2><p>参见我之前的一篇<a href="https://jshpy.cn/%E7%88%AC%E8%99%AB/scrapy%E5%90%AF%E5%8A%A8%E5%A4%9A%E7%88%AC%E8%99%AB.html" target="_blank" rel="noopener">文章</a></p><h2 id="…-…"><a href="#…-…" class="headerlink" title="… …"></a>… …</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用scrapy过程中总结了一些小技巧，在此分享出来供大家参考。&lt;/p&gt;
&lt;h2 id=&quot;用-LinkExtractor-收取链接&quot;&gt;&lt;a href=&quot;#用-LinkExtractor-收取链接&quot; class=&quot;headerlink&quot; title=&quot;用 LinkExtra
      
    
    </summary>
    
      <category term="爬虫" scheme="https://blog.jshpy.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="https://blog.jshpy.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy实现动态调试和同时启动多个爬虫</title>
    <link href="https://blog.jshpy.cn/%E7%88%AC%E8%99%AB/scrapy%E5%90%AF%E5%8A%A8%E5%A4%9A%E7%88%AC%E8%99%AB.html"/>
    <id>https://blog.jshpy.cn/爬虫/scrapy启动多爬虫.html</id>
    <published>2018-12-14T16:00:00.000Z</published>
    <updated>2020-04-19T13:59:15.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般启动方式"><a href="#一般启动方式" class="headerlink" title="一般启动方式"></a>一般启动方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spider_name</span><br></pre></td></tr></table></figure><p>命令行启动好处是灵活方便, 可以通过传递参数的形式控制爬虫的行为和输出。</p><blockquote><p>参见<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html#id3" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>比如你可以配置爬虫采集到数据的输出方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl dmoz -o items.json</span><br></pre></td></tr></table></figure></p><p>但是它的缺点也很明显:</p><ul><li>原子性太强，不方便动态调试代码</li><li>当需要启动多个爬虫时，不方便操作</li></ul><h2 id="新的思路"><a href="#新的思路" class="headerlink" title="新的思路"></a>新的思路</h2><p>我们知道<code>Scrapy</code>是基于Twisted实现的爬虫框架, 因此我们可以通过引入<code>reactor</code>来启动我们的爬虫。</p><p>为了方便理解，我把的项目结构展示出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── learn_scrapy</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── test.py</span><br><span class="line">├── debug.py</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure><p>我在项目根目录下新建了文件 <code>debug.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> configure_logging</span><br><span class="line"><span class="comment"># 引入spider</span></span><br><span class="line"><span class="keyword">from</span> learn_scrapy.spiders.test <span class="keyword">import</span> TestSpider</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">settings = get_project_settings()</span><br><span class="line">configure_logging(settings)</span><br><span class="line">runner = CrawlerRunner(settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 装载爬虫</span></span><br><span class="line">    runner.crawl(TestSpider)</span><br><span class="line">    <span class="comment"># 如果有多个爬虫需要启动可以一直装载下去</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider2)</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider3)</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider4)</span></span><br><span class="line">    <span class="comment"># ... ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 爬虫结束后停止事件循环</span></span><br><span class="line">    d = runner.join()</span><br><span class="line">    d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动事件循环</span></span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start_spider()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行这个文件<code>python3 debug.py</code>就可以启动爬虫。</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>在IDE下选择启动debug：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/debug_scrapy.png" alt=""></p><p>可以看到程序停在了断点处，可以很方便的查看程序运行时的堆栈和变量信息：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/debug_scrapy2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一般启动方式&quot;&gt;&lt;a href=&quot;#一般启动方式&quot; class=&quot;headerlink&quot; title=&quot;一般启动方式&quot;&gt;&lt;/a&gt;一般启动方式&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="爬虫" scheme="https://blog.jshpy.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="https://blog.jshpy.cn/tags/Scrapy/"/>
    
      <category term="Python3" scheme="https://blog.jshpy.cn/tags/Python3/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot的一些注解</title>
    <link href="https://blog.jshpy.cn/Spring/Spring%20Boot%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E8%A7%A3.html"/>
    <id>https://blog.jshpy.cn/Spring/Spring Boot的一些注解.html</id>
    <published>2018-08-12T16:00:00.000Z</published>
    <updated>2019-03-06T13:32:48.399Z</updated>
    
    <content type="html"><![CDATA[<p>总结下SpringBoot的一些注解</p><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目启动 Application 上的注解，配置 mybatis 的扫描路径<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.xxx.dataobject.mapper"</span>)</span><br></pre></td></tr></table></figure></p><p>在<code>@Select</code>等中写sql语句，传入 参数/对象属性/Map的键，通过 <code>#{categoryType}</code>格式化至sql，<code>@Results</code>将查询到的字段和方法返回对象的属性映射起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from product_category where category_type=#&#123;categoryType&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"category_name"</span>, property = <span class="string">"categoryName"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"category_id"</span>, property = <span class="string">"categoryId"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(column = <span class="string">"category_type"</span>, property = <span class="string">"categoryType"</span>),</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">ProductCategory <span class="title">findByCategoryType</span><span class="params">(Integer categoryType)</span></span>;</span><br></pre></td></tr></table></figure></p><p>传入多个参数时需要使用<code>@Param</code>将传入参数和sql中的格式化变量对应起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"update product_category set category_name = #&#123;categoryName&#125; where category_type = #&#123;categoryType&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateCategoryType</span><span class="params">(@Param(<span class="string">"categoryName"</span>)</span> String categoryName, @<span class="title">Param</span><span class="params">(<span class="string">"categoryType"</span>)</span> Integer categoryType)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="自动配置-get-set方法"><a href="#自动配置-get-set方法" class="headerlink" title="自动配置 get/set方法"></a>自动配置 get/set方法</h2><p>引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后可以在类上面加上 <code>@Getter</code> 、<code>@Setter</code>注解自动配置所有成员变量对应方法，<code>@Data</code>是二者都配置。</p><p>加上 <code>@Slf4j</code>注解后可以直接以如下形式输出日志，非常方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.warn(<span class="string">"【登陆校验】会话过期"</span>);</span><br></pre></td></tr></table></figure><h2 id="SpringBoot相关"><a href="#SpringBoot相关" class="headerlink" title="SpringBoot相关"></a>SpringBoot相关</h2><p>加上这两个注解的配置类，可以从 application.yml等配置文件中加载配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"some-config"</span>)</span><br></pre></td></tr></table></figure></p><p><code>@Component</code>和<code>@Bean</code>配合使用，实现对某类的自动化配置，如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatMpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WechatAccountConfig accountConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxMpService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WxMpService wxMpService = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        wxMpService.setWxMpConfigStorage(wxMpConfigStorage());</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpConfigStorage <span class="title">wxMpConfigStorage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpConfigStorage = <span class="keyword">new</span> WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpConfigStorage.setAppId(accountConfig.getMpAppId());</span><br><span class="line">        wxMpConfigStorage.setSecret(accountConfig.getMpAppSecret());</span><br><span class="line">        <span class="keyword">return</span> wxMpConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@Autowired</code>是将某个依赖注入进来的注解。</p><p>配置在执行某些类方法前后需要所执行的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//类注解</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.imook.sell.controller.Seller*.*(..))"</span>+</span><br><span class="line">              <span class="string">"&amp;&amp;!execution(public * com.imook.sell.controller.SellerUserController.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"verify()"</span>) <span class="comment">//方法注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doVerify</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"verify()"</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//RestController 返回json对象</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 返回模版文件或重定向等</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/wechat"</span>) <span class="comment">//配置整个Controller的路径</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authorize"</span>) <span class="comment">// Controller的方法注解 Get请求</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/create"</span>)  <span class="comment">// Controller的方法注解 Post</span></span><br></pre></td></tr></table></figure><p>参数注解<code>@Valid</code>多用于Post请求提交表单的验证，即该参数对象的属性要通过验证，比如该参数对象的某属性加了<code>@NotEmpty</code>注解，那么他就不能为空。</p><p>参数注解<code>@RequestParam</code>是声明某参数是来自于请求的，也可对该参数设置默认值，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestParam</span>(value = <span class="string">"page"</span>, defaultValue = <span class="string">"0"</span>) Integer page</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//映射表实体的类</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span> <span class="comment">//某些字段 自动更新</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//字段注解 表的 ID</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span> <span class="comment">//字段注解 自增长</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span>  <span class="comment">//接口返回时不返回该字段</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 拦截异常，自定义返回内容</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellerAuthorizeException.class) <span class="comment">//需要拦截的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SellException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//以JSON形式返回</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span> <span class="comment">//服务层类注解</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结下SpringBoot的一些注解&lt;/p&gt;
&lt;h2 id=&quot;mybatis&quot;&gt;&lt;a href=&quot;#mybatis&quot; class=&quot;headerlink&quot; title=&quot;mybatis&quot;&gt;&lt;/a&gt;mybatis&lt;/h2&gt;&lt;p&gt;依赖&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Spring" scheme="https://blog.jshpy.cn/categories/Spring/"/>
    
    
      <category term="Spring Boot" scheme="https://blog.jshpy.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib简单上手</title>
    <link href="https://blog.jshpy.cn/%E5%8F%AF%E8%A7%86%E5%8C%96/matplotlib%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B.html"/>
    <id>https://blog.jshpy.cn/可视化/matplotlib简单上手.html</id>
    <published>2018-07-01T09:33:13.594Z</published>
    <updated>2019-03-06T13:32:27.849Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结自<a href="https://www.imooc.com/video/14982" target="_blank" rel="noopener">途索</a>的慕课网课程，增加了些自己的理解。</p><p>matplotlib 是一个优秀的数据可视化库，可以很方便的使用<code>Python</code>生成方便我们分析的数据图表，一起来看看吧。</p><h2 id="导入必要的包"><a href="#导入必要的包" class="headerlink" title="导入必要的包"></a>导入必要的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>如果是在<code>jupyter</code>中操作，可以使用<code>%matplotlib inline</code>这个魔术方法，它会将<code>matplotlib</code>绘制的图表显示在记事本中，方便直观的浏览。</p><p>同时我们还导入了<code>numpy</code>，它是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><h2 id="准备绘图数据"><a href="#准备绘图数据" class="headerlink" title="准备绘图数据"></a>准备绘图数据</h2><p>下面我们用它来生成一些绘图需要的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br></pre></td></tr></table></figure></p><p><code>linspace</code>方法指定均匀的生成256个从-pi到pi之间的点，返回一个<code>np.array</code>形式的数组。</p><p>见名知意，<code>np.cos(x)</code>和 <code>np.sin(x)</code>是对<code>x</code>做了余弦和正弦的计算，并同样返回数组。</p><h2 id="开始画图"><a href="#开始画图" class="headerlink" title="开始画图"></a>开始画图</h2><p>有了数据我们开始画图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>)  <span class="comment"># 当作是新建一个画布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在画布上画两个图形</span></span><br><span class="line">plt.plot(x, c)  <span class="comment"># x是横轴，c是纵轴</span></span><br><span class="line">plt.plot(x, s)</span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-5355f3d24a2dd77d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p><h2 id="丰富我们的图形"><a href="#丰富我们的图形" class="headerlink" title="丰富我们的图形"></a>丰富我们的图形</h2><p>当然，让面只是一个最简单的例子，实际操作时我们需要更多的标注信息，来时我们绘制的图形更易读。</p><h3 id="线形、颜色和标题"><a href="#线形、颜色和标题" class="headerlink" title="线形、颜色和标题"></a>线形、颜色和标题</h3><p>在我们原来的代码上做些许修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">'red'</span>, linestyle=<span class="string">'-'</span>, label=<span class="string">'sin'</span>)  <span class="comment"># label 后面绘制图例用</span></span><br><span class="line">plt.plot(x, c, <span class="string">'b--'</span>, label=<span class="string">'cos'</span>)  <span class="comment"># b* 同时表示颜色和线型</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin&amp;cos'</span>) <span class="comment"># 添加title信息</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-20c6f4af4c964d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><h3 id="移动坐标轴"><a href="#移动坐标轴" class="headerlink" title="移动坐标轴"></a>移动坐标轴</h3><p>看起来好多了， 可是坐标轴在两侧有点别扭，我们把它挪到中间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取轴编辑器</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 将图像的上边框和右边框隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"><span class="comment"># 将图像的下边框和左边框设置到数据域的0位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-7841f6c73274b5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><h3 id="修改坐标值，添加图例"><a href="#修改坐标值，添加图例" class="headerlink" title="修改坐标值，添加图例"></a>修改坐标值，添加图例</h3><p>看起来不错，不过横轴看不出来我们的绘制点和<code>pi</code>有啥关系，我们需要修改下单位信息，同时把图例加上。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定五个点，使用laText，编辑公式并显示</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>,<span class="string">r'$-\pi/2$'</span>,<span class="string">r'$0$'</span>,<span class="string">r'$\pi/2$'</span>,<span class="string">r'$\pi$'</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)  <span class="comment"># 根据label显示的图例相对于画面的位置</span></span><br><span class="line">plt.grid()  <span class="comment"># 显示网格线</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-0925659213edc1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p><p>至此我们画了一个比较可观的图形了，下面是完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">'red'</span>, linestyle=<span class="string">'-'</span>, label=<span class="string">'sin'</span>)  <span class="comment"># label 后面绘制图例用</span></span><br><span class="line">plt.plot(x, c, <span class="string">'b--'</span>, label=<span class="string">'cos'</span>)  <span class="comment"># b* 同时表示颜色和线型</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin&amp;cos'</span>) <span class="comment"># 添加title信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取轴编辑器</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像的上边框和右边框隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像的下边框和左边框设置到数据域的0位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定五个点，使用laText，编辑公式并显示</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>,<span class="string">r'$-\pi/2$'</span>,<span class="string">r'$0$'</span>,<span class="string">r'$\pi/2$'</span>,<span class="string">r'$\pi$'</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="散点图的绘制"><a href="#散点图的绘制" class="headerlink" title="散点图的绘制"></a>散点图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">fig.add_subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>)  <span class="comment"># 将图像分割成三行三列，画在第一个区域中</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)  <span class="comment"># 生成随机高斯分布，0是均值，1是标准差，生成128个</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line"></span><br><span class="line">T = np.arctan2(Y, X)  <span class="comment"># 上色用</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">10</span>, c=T)  <span class="comment"># s表示点的大小， c是颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制轴的范围</span></span><br><span class="line">plt.axis([<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>])  <span class="comment"># [xmin, xmax, ymin, ymax]</span></span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'scatter'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-88b329e13a9314df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p><h2 id="柱状图的绘制"><a href="#柱状图的绘制" class="headerlink" title="柱状图的绘制"></a>柱状图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line">fig.add_subplot(<span class="number">332</span>) <span class="comment"># 等价于 (3,3,2)</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">X = np.arange(n)</span><br><span class="line"></span><br><span class="line">Y1 = (<span class="number">1</span>-X/float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line">Y2 = (<span class="number">1</span>-X/float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加注释</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y1):</span><br><span class="line">    plt.text(x, y, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y2):</span><br><span class="line">    plt.text(x, -y, <span class="string">'%.2f'</span> % -y, ha=<span class="string">'center'</span>, va=<span class="string">'top'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-05807540d4bf72ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 饼图</span></span><br><span class="line">fig.add_subplot(<span class="number">333</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Z = np.ones(n)</span><br><span class="line">Z[<span class="number">-1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.pie(Z, colors=[<span class="string">'%.2f'</span> % (i/float(n)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)], </span><br><span class="line">        labels=[<span class="string">'%.2f'</span> % (i/float(n)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line"></span><br><span class="line">plt.gca().set_aspect(<span class="string">'equal'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'pie'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-e91adf936ad6e990.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7"></p><h2 id="绘制极坐标图"><a href="#绘制极坐标图" class="headerlink" title="绘制极坐标图"></a>绘制极坐标图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 极坐标</span></span><br><span class="line">fig.add_subplot(<span class="number">334</span>, polar=<span class="keyword">True</span>)  <span class="comment"># 画图用的是plot， 所以指定polar</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">theta = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">2</span>*np.pi/n)</span><br><span class="line">radii = <span class="number">10</span>*np.random.rand(n)</span><br><span class="line"></span><br><span class="line">plt.plot(theta, radii) </span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'polar'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-dd0b8ff39f1a6062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8"></p><h2 id="热图"><a href="#热图" class="headerlink" title="热图"></a>热图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热图</span></span><br><span class="line">fig.add_subplot(<span class="number">335</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm  <span class="comment"># 上色用</span></span><br><span class="line">cmap = cm.Blues</span><br><span class="line"></span><br><span class="line">data = np.random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(data, cmap=cmap)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'heatmap'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-6beb59d87858551b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9"></p><h2 id="3D图"><a href="#3D图" class="headerlink" title="3D图"></a>3D图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  <span class="comment"># 引入三维坐标系</span></span><br><span class="line">fig.add_subplot(<span class="number">336</span>, projection=<span class="string">'3d'</span>)  <span class="comment"># 设置三维画布</span></span><br><span class="line"></span><br><span class="line">X = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">Y = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">Z = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y,Z)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-3dceff91b299f587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10"></p><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热力图</span></span><br><span class="line">fig.add_subplot(<span class="number">313</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - Y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line"></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line"></span><br><span class="line">plt.contourf(X, Y, f(X,  Y), cmap=plt.cm.hot)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-47c9ce930229980c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好啦，至此我们用<code>matplotlib</code>绘制了大多数的图形样式，并且使用了绘制子图的方式，将其绘制在同一个画布中，相信你已经可以根据自己的需求绘制相应的图形了。</p><p>最后如果我们想要保存绘制好的图形可以这样操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">'./fig.png'</span>)</span><br></pre></td></tr></table></figure><p>在项目目录下就会的到保存的图片啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文总结自&lt;a href=&quot;https://www.imooc.com/video/14982&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;途索&lt;/a&gt;的慕课网课程，增加了些自己的理解。&lt;/p&gt;
&lt;p&gt;matplotlib 是一个优秀的数据可视化库，可以
      
    
    </summary>
    
      <category term="可视化" scheme="https://blog.jshpy.cn/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="matplotlib" scheme="https://blog.jshpy.cn/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow简单认识</title>
    <link href="https://blog.jshpy.cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Tensorflow%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86.html"/>
    <id>https://blog.jshpy.cn/机器学习/Tensorflow简单认识.html</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2019-03-06T13:33:17.356Z</updated>
    
    <content type="html"><![CDATA[<p>这两天看了些<code>tensorflow</code>的知识点，这里分享一点心得。</p><p>最直观的感受，和以往编程最大的不同是，数据不是实时操控的。</p><p>编码的过程实际上是在用程序构造一个<code>计算图</code>，这个计算图定义了处理数据、模型创建、训练、验证、测试等等一系列行为。</p><p>这个计算图有一个入口，就是我们的数据集，当我们把数据喂到这个图中，一切就按照我们预先等一好的那样运转起来，直至最后给出结果。</p><p>用一个图来直观感受下：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/tensors_flowing.gif" alt="pic"></p><p>那也就是说，我们在定义图的过程中，用到的基础的数据结构它并不是“真实”的，更像是一个约定，等到数据经过这真实的计算才会发生。</p><p>来看一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant(<span class="number">3.0</span>, dtype=tf.float32)</span><br><span class="line">b = tf.constant(<span class="number">4.0</span>) <span class="comment"># also tf.float32 implicitly</span></span><br><span class="line">total = a + b</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><p>通常我们以为程序会直接打印出a、b的值和求和的结果total，然而实际输出是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tensor(<span class="string">"Const:0"</span>, shape=(), dtype=float32)</span><br><span class="line">Tensor(<span class="string">"Const_1:0"</span>, shape=(), dtype=float32)</span><br><span class="line">Tensor(<span class="string">"add:0"</span>, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><p><code>tensorflow</code>只是描述了“有两个变量a、b，total是他们的和”，并没有立即计算结果。</p><p>如果要让这个图运行起来需要提供一个运行时的会话<code>tf.Session</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(total))</span><br></pre></td></tr></table></figure><p>这时程序才会输出预期的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.0</span></span><br></pre></td></tr></table></figure></p><p>更直观的我们构建图的时候指定占位符<code>tf.placeholder</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line">z = x + y</span><br></pre></td></tr></table></figure></p><p><code>placeholder</code>承诺在稍后提供值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(z, feed_dict=&#123;x: <span class="number">3</span>, y: <span class="number">4.5</span>&#125;))</span><br></pre></td></tr></table></figure></p><p>程序输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.5</span></span><br></pre></td></tr></table></figure></p><p>由此可见，<code>tensorflow</code>和常规的编码习惯有稍许的不同，我猜想这样的好处是，由于机器学习对算力的要求很高，实际部署项目运行并不会在单机上进行计算，引入<code>session</code>的机制可以控制任务在分布式的集群上协调计算，而事先我们只要提供一个运算大纲也就是<code>计算图</code>就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天看了些&lt;code&gt;tensorflow&lt;/code&gt;的知识点，这里分享一点心得。&lt;/p&gt;
&lt;p&gt;最直观的感受，和以往编程最大的不同是，数据不是实时操控的。&lt;/p&gt;
&lt;p&gt;编码的过程实际上是在用程序构造一个&lt;code&gt;计算图&lt;/code&gt;，这个计算图定义了处理数据、模型
      
    
    </summary>
    
      <category term="机器学习" scheme="https://blog.jshpy.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Tensorflow" scheme="https://blog.jshpy.cn/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS 环境搭建</title>
    <link href="https://blog.jshpy.cn/%E8%BF%90%E7%BB%B4/HTTPS%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>https://blog.jshpy.cn/运维/HTTPS 环境搭建.html</id>
    <published>2018-01-16T15:33:06.000Z</published>
    <updated>2019-03-06T13:31:45.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><ol><li>登录阿里云管理控制台</li><li>CA证书服务 -&gt; 购买证书</li><li>选择 <code>免费型DV SSL</code> 品牌 <code>Symantec</code></li><li>购买 -&gt; 支付</li><li>回到<code>步骤2</code>证书服务控制台</li><li>补全域名信息</li><li>等待审核成功</li></ol><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><ol><li>登录证书服务控制台，找到到对应证书点击<code>下载</code>。</li><li>得到两个证书文件：<code>214448811130415.key</code>、 <code>214448811130415.pem</code></li><li>在Nginx安装目录下创建一个文件夹将其放入，我这里是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Guitar cert]# pwd</span><br><span class="line">/etc/nginx/cert</span><br><span class="line">[root@Guitar cert]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 1679 Jan 16 22:20 213989769950415.key</span><br><span class="line">-rw-r--r-- 1 root root 3297 Jan 16 22:20 213989769950415.pem</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改配置文件-nginx-conf"><a href="#修改配置文件-nginx-conf" class="headerlink" title="修改配置文件 nginx.conf"></a>修改配置文件 nginx.conf</h2><p>将原来注释的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#    listen       443 ssl;</span></span><br><span class="line"><span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line"><span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    location / &#123;</span></span><br><span class="line"><span class="comment">#        root   html;</span></span><br><span class="line"><span class="comment">#        index  index.html index.htm;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  api.xiuni.club;</span><br><span class="line">    ssl          on;</span><br><span class="line">    root /wechat/www;</span><br><span class="line">    index index.html; </span><br><span class="line">    ssl_certificate   /etc/nginx/cert/213989769950415.pem;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/213989769950415.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        root /wechat/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理静态资源:</span></span><br><span class="line">    location ~ ^\/static\/.*$ &#123;</span><br><span class="line">        root /wechat/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 动态请求转发到9000端口:</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment">#     proxy_pass       http://127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header Host $host;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到刚才上传的证书文件路径也要对应的配置上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate   /etc/nginx/cert/213989769950415.pem;</span><br><span class="line">ssl_certificate_key  /etc/nginx/cert/213989769950415.key;</span><br></pre></td></tr></table></figure><ul><li>也可以根据再自己的情况添加必要的配置</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>重启Nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>https://your.domain.com</code> 可以正常发起https请求</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;申请证书&quot;&gt;&lt;a href=&quot;#申请证书&quot; class=&quot;headerlink&quot; title=&quot;申请证书&quot;&gt;&lt;/a&gt;申请证书&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;登录阿里云管理控制台&lt;/li&gt;
&lt;li&gt;CA证书服务 -&amp;gt; 购买证书&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;
      
    
    </summary>
    
      <category term="运维" scheme="https://blog.jshpy.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="HTTPS" scheme="https://blog.jshpy.cn/tags/HTTPS/"/>
    
      <category term="证书" scheme="https://blog.jshpy.cn/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
</feed>
