<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangxu&#39;s blog</title>
  
  <subtitle>HZX</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jshpy.cn/"/>
  <updated>2018-07-16T09:22:33.681Z</updated>
  <id>http://jshpy.cn/</id>
  
  <author>
    <name>张旭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>matplotlib简单上手</title>
    <link href="http://jshpy.cn/2018/07/01/:year-:month-:day-:title.html/"/>
    <id>http://jshpy.cn/2018/07/01/:year-:month-:day-:title.html/</id>
    <published>2018-07-01T09:33:13.594Z</published>
    <updated>2018-07-16T09:22:33.681Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结自<a href="https://www.imooc.com/video/14982" target="_blank" rel="noopener">途索</a>的慕课网课程，增加了些自己的理解。</p><p>matplotlib 是一个优秀的数据可视化库，可以很方便的使用<code>Python</code>生成方便我们分析的数据图表，一起来看看吧。</p><h2 id="导入必要的包"><a href="#导入必要的包" class="headerlink" title="导入必要的包"></a>导入必要的包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>如果是在<code>jupyter</code>中操作，可以使用<code>%matplotlib inline</code>这个魔术方法，它会将<code>matplotlib</code>绘制的图表显示在记事本中，方便直观的浏览。</p><p>同时我们还导入了<code>numpy</code>，它是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><h2 id="准备绘图数据"><a href="#准备绘图数据" class="headerlink" title="准备绘图数据"></a>准备绘图数据</h2><p>下面我们用它来生成一些绘图需要的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br></pre></td></tr></table></figure></p><p><code>linspace</code>方法指定均匀的生成256个从-pi到pi之间的点，返回一个<code>np.array</code>形式的数组。</p><p>见名知意，<code>np.cos(x)</code>和 <code>np.sin(x)</code>是对<code>x</code>做了余弦和正弦的计算，并同样返回数组。</p><h2 id="开始画图"><a href="#开始画图" class="headerlink" title="开始画图"></a>开始画图</h2><p>有了数据我们开始画图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>)  <span class="comment"># 当作是新建一个画布</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在画布上画两个图形</span></span><br><span class="line">plt.plot(x, c)  <span class="comment"># x是横轴，c是纵轴</span></span><br><span class="line">plt.plot(x, s)</span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-5355f3d24a2dd77d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p><h2 id="丰富我们的图形"><a href="#丰富我们的图形" class="headerlink" title="丰富我们的图形"></a>丰富我们的图形</h2><p>当然，让面只是一个最简单的例子，实际操作时我们需要更多的标注信息，来时我们绘制的图形更易读。</p><h3 id="线形、颜色和标题"><a href="#线形、颜色和标题" class="headerlink" title="线形、颜色和标题"></a>线形、颜色和标题</h3><p>在我们原来的代码上做些许修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">'red'</span>, linestyle=<span class="string">'-'</span>, label=<span class="string">'sin'</span>)  <span class="comment"># label 后面绘制图例用</span></span><br><span class="line">plt.plot(x, c, <span class="string">'b--'</span>, label=<span class="string">'cos'</span>)  <span class="comment"># b* 同时表示颜色和线型</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin&amp;cos'</span>) <span class="comment"># 添加title信息</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-20c6f4af4c964d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><h3 id="移动坐标轴"><a href="#移动坐标轴" class="headerlink" title="移动坐标轴"></a>移动坐标轴</h3><p>看起来好多了， 可是坐标轴在两侧有点别扭，我们把它挪到中间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取轴编辑器</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"><span class="comment"># 将图像的上边框和右边框隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"><span class="comment"># 将图像的下边框和左边框设置到数据域的0位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-7841f6c73274b5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><h3 id="修改坐标值，添加图例"><a href="#修改坐标值，添加图例" class="headerlink" title="修改坐标值，添加图例"></a>修改坐标值，添加图例</h3><p>看起来不错，不过横轴看不出来我们的绘制点和<code>pi</code>有啥关系，我们需要修改下单位信息，同时把图例加上。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定五个点，使用laText，编辑公式并显示</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>,<span class="string">r'$-\pi/2$'</span>,<span class="string">r'$0$'</span>,<span class="string">r'$\pi/2$'</span>,<span class="string">r'$\pi$'</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)  <span class="comment"># 根据label显示的图例相对于画面的位置</span></span><br><span class="line">plt.grid()  <span class="comment"># 显示网格线</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/6489962-0925659213edc1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4"></p><p>至此我们画了一个比较可观的图形了，下面是完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-np.pi, np.pi, <span class="number">256</span>)</span><br><span class="line">c, s = np.cos(x), np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(x, s, color=<span class="string">'red'</span>, linestyle=<span class="string">'-'</span>, label=<span class="string">'sin'</span>)  <span class="comment"># label 后面绘制图例用</span></span><br><span class="line">plt.plot(x, c, <span class="string">'b--'</span>, label=<span class="string">'cos'</span>)  <span class="comment"># b* 同时表示颜色和线型</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'sin&amp;cos'</span>) <span class="comment"># 添加title信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取轴编辑器</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像的上边框和右边框隐藏</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像的下边框和左边框设置到数据域的0位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定五个点，使用laText，编辑公式并显示</span></span><br><span class="line">plt.xticks([-np.pi, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>,<span class="string">r'$-\pi/2$'</span>,<span class="string">r'$0$'</span>,<span class="string">r'$\pi/2$'</span>,<span class="string">r'$\pi$'</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="散点图的绘制"><a href="#散点图的绘制" class="headerlink" title="散点图的绘制"></a>散点图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">fig.add_subplot(<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>)  <span class="comment"># 将图像分割成三行三列，画在第一个区域中</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">X = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)  <span class="comment"># 生成随机高斯分布，0是均值，1是标准差，生成128个</span></span><br><span class="line">Y = np.random.normal(<span class="number">0</span>,<span class="number">1</span>,n)</span><br><span class="line"></span><br><span class="line">T = np.arctan2(Y, X)  <span class="comment"># 上色用</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X, Y, s=<span class="number">10</span>, c=T)  <span class="comment"># s表示点的大小， c是颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制轴的范围</span></span><br><span class="line">plt.axis([<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>])  <span class="comment"># [xmin, xmax, ymin, ymax]</span></span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'scatter'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-88b329e13a9314df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5"></p><h2 id="柱状图的绘制"><a href="#柱状图的绘制" class="headerlink" title="柱状图的绘制"></a>柱状图的绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line">fig.add_subplot(<span class="number">332</span>) <span class="comment"># 等价于 (3,3,2)</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">X = np.arange(n)</span><br><span class="line"></span><br><span class="line">Y1 = (<span class="number">1</span>-X/float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line">Y2 = (<span class="number">1</span>-X/float(n)) * np.random.uniform(<span class="number">0.5</span>, <span class="number">1.0</span>, n)</span><br><span class="line"></span><br><span class="line">plt.bar(X, +Y1, facecolor=<span class="string">'red'</span>)</span><br><span class="line">plt.bar(X, -Y2, facecolor=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加注释</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y1):</span><br><span class="line">    plt.text(x, y, <span class="string">'%.2f'</span> % y, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(X, Y2):</span><br><span class="line">    plt.text(x, -y, <span class="string">'%.2f'</span> % -y, ha=<span class="string">'center'</span>, va=<span class="string">'top'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-05807540d4bf72ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6"></p><h2 id="绘制饼图"><a href="#绘制饼图" class="headerlink" title="绘制饼图"></a>绘制饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 饼图</span></span><br><span class="line">fig.add_subplot(<span class="number">333</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Z = np.ones(n)</span><br><span class="line">Z[<span class="number">-1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.pie(Z, colors=[<span class="string">'%.2f'</span> % (i/float(n)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)], </span><br><span class="line">        labels=[<span class="string">'%.2f'</span> % (i/float(n)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)])</span><br><span class="line"></span><br><span class="line">plt.gca().set_aspect(<span class="string">'equal'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([])  <span class="comment"># 取消显示轴上的数值</span></span><br><span class="line">plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'pie'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-e91adf936ad6e990.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7"></p><h2 id="绘制极坐标图"><a href="#绘制极坐标图" class="headerlink" title="绘制极坐标图"></a>绘制极坐标图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 极坐标</span></span><br><span class="line">fig.add_subplot(<span class="number">334</span>, polar=<span class="keyword">True</span>)  <span class="comment"># 画图用的是plot， 所以指定polar</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">theta = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">2</span>*np.pi/n)</span><br><span class="line">radii = <span class="number">10</span>*np.random.rand(n)</span><br><span class="line"></span><br><span class="line">plt.plot(theta, radii) </span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'polar'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-dd0b8ff39f1a6062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8"></p><h2 id="热图"><a href="#热图" class="headerlink" title="热图"></a>热图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热图</span></span><br><span class="line">fig.add_subplot(<span class="number">335</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm  <span class="comment"># 上色用</span></span><br><span class="line">cmap = cm.Blues</span><br><span class="line"></span><br><span class="line">data = np.random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">plt.imshow(data, cmap=cmap)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'heatmap'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-6beb59d87858551b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9"></p><h2 id="3D图"><a href="#3D图" class="headerlink" title="3D图"></a>3D图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D  <span class="comment"># 引入三维坐标系</span></span><br><span class="line">fig.add_subplot(<span class="number">336</span>, projection=<span class="string">'3d'</span>)  <span class="comment"># 设置三维画布</span></span><br><span class="line"></span><br><span class="line">X = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">Y = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">Z = [<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(X,Y,Z)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-3dceff91b299f587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10"></p><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热力图</span></span><br><span class="line">fig.add_subplot(<span class="number">313</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x/<span class="number">2</span> + x**<span class="number">5</span> + y**<span class="number">3</span>) * np.exp(-x**<span class="number">2</span> - Y**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line">y = np.linspace(<span class="number">-3</span>,<span class="number">3</span>,n)</span><br><span class="line"></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line"></span><br><span class="line">plt.contourf(X, Y, f(X,  Y), cmap=plt.cm.hot)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6489962-47c9ce930229980c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>好啦，至此我们用<code>matplotlib</code>绘制了大多数的图形样式，并且使用了绘制子图的方式，将其绘制在同一个画布中，相信你已经可以根据自己的需求绘制相应的图形了。</p><p>最后如果我们想要保存绘制好的图形可以这样操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">'./fig.png'</span>)</span><br></pre></td></tr></table></figure><p>在项目目录下就会的到保存的图片啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文总结自&lt;a href=&quot;https://www.imooc.com/video/14982&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;途索&lt;/a&gt;的慕课网课程，增加了些自己的理解。&lt;/p&gt;
&lt;p&gt;matplotlib 是一个优秀的数据可视化库，可以
      
    
    </summary>
    
      <category term="可视化" scheme="http://jshpy.cn/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="matplotlib" scheme="http://jshpy.cn/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>短文本分类之构建词向量</title>
    <link href="http://jshpy.cn/2018/07/01/:year-:month-:day-:title.html/"/>
    <id>http://jshpy.cn/2018/07/01/:year-:month-:day-:title.html/</id>
    <published>2018-07-01T09:33:13.594Z</published>
    <updated>2018-07-16T09:22:45.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><p>我的目标是利用tenserflow得到一个可以对新闻标题进行准确分类的分类器。</p><p>首先我需要有新闻标题的原始数据，因此我从今日头条抓取了近十万条新闻标题用于接下来的训练工作。</p><p>得到原始标题数据后，我需要对其进行分词构建语料库，分词我使用<code>jieba</code>这个第三方库。</p><p>之后要通过语料库用Word2vec算法对分词进行训练，这里我使用<code>gensim</code>的<code>word2vec</code>。</p><p><strong>梳理下准备条件：</strong></p><ul><li>原始新闻标题数据</li><li>jiaba</li><li>gensim</li></ul><h2 id="生成语料文件"><a href="#生成语料文件" class="headerlink" title="生成语料文件"></a>生成语料文件</h2><p>我抓取的数据存放在MYSQL，因此我将查询出标题进行分词后写入语料文件：<code>yuliao.txt</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">path = sys.path[<span class="number">0</span>]</span><br><span class="line">yuliao_path = os.path.join(path, <span class="string">'yuliao.txt'</span>) <span class="comment"># 生成语料的路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_biaodian</span><span class="params">(cnt)</span>:</span></span><br><span class="line">    pat = <span class="string">r'[！？｡＂＃＄％＆＇（）＊＋，－／：；＜＝＞＠［＼］＾＿｀｛｜｝～｟｠｢｣､、〃《》「」『』【】〔〕〖〗〘〙〚〛〜〝〞〟〰〾〿–—‘’‛“”„‟…‧﹏.]+|[!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@\[\\\]\^\_\`\&#123;\|\&#125;\~0-9]+'</span><span class="comment">#去标点</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(pat, <span class="string">''</span>, cnt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_kong</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">' '</span> <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title_handle</span><span class="params">(title)</span>:</span></span><br><span class="line">    <span class="comment"># 去除标点符号</span></span><br><span class="line">    title = filter_biaodian(title)</span><br><span class="line">    title = <span class="string">' '</span>.join(list(filter(filter_kong, jieba.lcut(title)))) + <span class="string">' '</span></span><br><span class="line">    <span class="keyword">return</span> title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    sql = <span class="string">'''</span></span><br><span class="line"><span class="string">        select title from ToutiaoNews</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    res = db.execute_sql(sql)</span><br><span class="line">    <span class="keyword">with</span> open(yuliao_path, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> title <span class="keyword">in</span> res:</span><br><span class="line">            title = title_handle(title[<span class="number">0</span>])</span><br><span class="line">            fp.write(title)</span><br></pre></td></tr></table></figure><p>虽然<code>jieba</code>分词已经很不错了，但是对于某些热门新词和人名等还是不够准确，所以有必要自定义一些词汇提供给<code>jieba</code>。</p><p>我在<code>user_dict.txt</code>中定义了一些<code>jieba</code>没有正确分出来的词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C罗</span><br><span class="line">王思聪</span><br><span class="line">陈意涵</span><br><span class="line">王晶</span><br><span class="line">四驱</span><br><span class="line">杨超越</span><br><span class="line">高颖浠</span><br><span class="line">李子璇</span><br><span class="line">热依娜</span><br><span class="line">摩拜</span><br><span class="line">发威</span><br><span class="line">余额宝</span><br><span class="line">小鲜肉</span><br></pre></td></tr></table></figure></p><p>然后加载到我们的程序中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载自定义字典</span></span><br><span class="line">dict_path = os.path.join(path, <span class="string">"user_dict.txt"</span>)</span><br><span class="line">jieba.load_userdict(dict_path)</span><br></pre></td></tr></table></figure><p>执行<code>load_data</code>方法便会生成语料文件。</p><h2 id="训练和保存模型"><a href="#训练和保存模型" class="headerlink" title="训练和保存模型"></a>训练和保存模型</h2><p>导入<code>gensim</code>，加载我们的语料文件，开始训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec </span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型文件存放路径</span></span><br><span class="line">model_path = os.path.join(path, <span class="string">"word2vec_model.bin"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'加载语料文件...'</span>)</span><br><span class="line">    sentences =word2vec.Text8Corpus(yuliao_path)  <span class="comment"># 加载语料  </span></span><br><span class="line">    print(<span class="string">'模型训练中...'</span>)</span><br><span class="line">    model =word2vec.Word2Vec(sentences, size=<span class="number">200</span>)  <span class="comment">#训练skip-gram模型，默认window=5  </span></span><br><span class="line">    <span class="comment"># 保存模型，以便重用  </span></span><br><span class="line">    print(<span class="string">'保存模型文件中...'</span>)</span><br><span class="line">    model.save(model_path)</span><br></pre></td></tr></table></figure><p>训练好模型保存为文件，下次可以直接从文件导入，不必再进行训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_word2vec_model</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    加载训练好的模型</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'加载模型文件...'</span>)</span><br><span class="line">    <span class="keyword">return</span> word2vec.Word2Vec.load(model_path) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_most_similar</span><span class="params">(words)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    测试输出最相关的20个词</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    model = load_word2vec_model()</span><br><span class="line">    y2 = model.most_similar(words, topn=<span class="number">20</span>)  <span class="comment"># 20个最相关的  </span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"-------------"</span>)</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt; 和 &#123;&#125; 最相关的20个词:\n'</span>.format(words))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> y2:  </span><br><span class="line">        print(item[<span class="number">0</span>], item[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"-------------"</span>)</span><br></pre></td></tr></table></figure><p>我们看下模型的效果，运行<code>print_most_similar</code>测试方法，输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>和 人工智能 最相关的<span class="number">20</span>个词:</span><br><span class="line"></span><br><span class="line">前景 <span class="number">0.9870855212211609</span></span><br><span class="line">应用 <span class="number">0.986504077911377</span></span><br><span class="line">推动 <span class="number">0.9858032464981079</span></span><br><span class="line">观察 <span class="number">0.9855602979660034</span></span><br><span class="line">机器人 <span class="number">0.9849052429199219</span></span><br><span class="line">共享 <span class="number">0.9845559000968933</span></span><br><span class="line">展锐 <span class="number">0.9841729402542114</span></span><br><span class="line">发展趋势 <span class="number">0.9837538599967957</span></span><br><span class="line">指数 <span class="number">0.9834417700767517</span></span><br><span class="line">金服 <span class="number">0.9829524159431458</span></span><br><span class="line">进一步 <span class="number">0.9829222559928894</span></span><br><span class="line">高质量 <span class="number">0.9827390909194946</span></span><br><span class="line">解读 <span class="number">0.9825021624565125</span></span><br><span class="line">趋势 <span class="number">0.9823193550109863</span></span><br><span class="line">实体 <span class="number">0.9820591807365417</span></span><br><span class="line">各大 <span class="number">0.9819753170013428</span></span><br><span class="line">物流 <span class="number">0.9819672107696533</span></span><br><span class="line">生态 <span class="number">0.9815815687179565</span></span><br><span class="line">房地产 <span class="number">0.981529712677002</span></span><br><span class="line">运营 <span class="number">0.9815083742141724</span></span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p>效果还可以，如果语料再多一点会更好。</p><h2 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h2><p>训练好的模型相近意思的词在向量空间中的位置也是相似的，这样我们依据词向量做分类训练，本质上是将相近意思的句子归类。</p><p>当然最终我们要得到某个词的向量表示形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    model = load_word2vec_model()</span><br><span class="line">    print(&apos;model type:&apos;, type(model))</span><br><span class="line">    print(model[&apos;ofo&apos;])    </span><br><span class="line">    print(&apos;model size of ofo:&apos;, len(model[&apos;ofo&apos;]))</span><br><span class="line">    print(&apos;the type of an element of the ofo:&apos;, type(model[&apos;ofo&apos;][0]))</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">加载模型文件...</span><br><span class="line">--&gt; model type: &lt;class &apos;gensim.models.word2vec.Word2Vec&apos;&gt;</span><br><span class="line">[-0.12093621  0.21866739  0.0476281   0.15949744 -0.2265305  -0.08501934</span><br><span class="line">  0.1477401  -0.00190862 -0.03246938 -0.06177654  0.14871995  0.19064938</span><br><span class="line">  0.20575511 -0.12488797  0.18135293  0.17202124 -0.09171224 -0.21369526</span><br><span class="line">  0.03578532 -0.08414337 -0.04215271 -0.07621672  0.22449629  0.0337574</span><br><span class="line"> -0.01039878  0.01468771  0.15081759  0.09702738 -0.33268988  0.11885371</span><br><span class="line"> -0.16769075  0.09913398 -0.0534218   0.15699175 -0.10522668  0.02929186</span><br><span class="line">  0.15697408  0.10360114 -0.22695963 -0.09760883 -0.06047406  0.20749298</span><br><span class="line">  0.16786923 -0.32377186 -0.0979296   0.23040165 -0.06727723  0.2789535</span><br><span class="line"> -0.05251723  0.05750585  0.04498681 -0.19886209 -0.14110063 -0.43698636</span><br><span class="line">  0.31315592 -0.0539036   0.18757886 -0.12233631  0.25112468 -0.12556228</span><br><span class="line"> -0.19618745  0.23073478  0.09799167 -0.09279976 -0.13416637 -0.30544615</span><br><span class="line">  0.20916344  0.18377133 -0.20380071  0.06745876  0.22611332 -0.11335444</span><br><span class="line"> -0.30527177 -0.0248933   0.01644903 -0.09095342  0.17283195 -0.11239095</span><br><span class="line"> -0.01026074 -0.11678243 -0.20007738 -0.00843141  0.12541942  0.08090381</span><br><span class="line">  0.13402799 -0.25427282  0.00226124 -0.11637224 -0.07989754  0.09807675</span><br><span class="line"> -0.01441371 -0.13024434 -0.15721492 -0.21402866  0.04589665 -0.06763294</span><br><span class="line"> -0.17075238 -0.07745436  0.0095577  -0.38303027  0.07163925  0.38283527</span><br><span class="line">  0.25002772  0.32608908  0.13308333  0.24943127  0.03098303  0.03559564</span><br><span class="line"> -0.05252191 -0.01458469  0.14649096  0.17111804  0.1398329  -0.06161319</span><br><span class="line">  0.0758339   0.01116067 -0.1789481  -0.39118966  0.02592629  0.11360105</span><br><span class="line"> -0.12705195 -0.09707507  0.20374824  0.20948473  0.189067   -0.08490008</span><br><span class="line">  0.03691229 -0.03789151  0.09222446  0.36308745 -0.11168318  0.04258949</span><br><span class="line"> -0.04875926 -0.06543283 -0.05993763 -0.21278009  0.15429844 -0.03047387</span><br><span class="line">  0.08654932 -0.27806106  0.13747326 -0.3273331  -0.18196188 -0.20869672</span><br><span class="line">  0.19920668  0.16047722 -0.22706664  0.14389433  0.12567239 -0.2691268</span><br><span class="line"> -0.20942092 -0.0147821  -0.14789784 -0.04505106 -0.17953952  0.00555091</span><br><span class="line"> -0.02158411  0.21042849 -0.10467305 -0.01584556 -0.08712497  0.01285077</span><br><span class="line">  0.13214627 -0.05077496  0.20669343  0.25896493  0.14283897 -0.06721289</span><br><span class="line"> -0.13196066 -0.04882697  0.02222396  0.00217219  0.11299089 -0.09901663</span><br><span class="line"> -0.15670624 -0.13901645  0.1034102   0.15072429  0.42944327  0.02470743</span><br><span class="line">  0.11724957  0.09513479 -0.1651883   0.12621285  0.17963493  0.09137619</span><br><span class="line">  0.02091281 -0.04587717  0.0837699  -0.14793368  0.13413116  0.01136413</span><br><span class="line"> -0.31699035  0.03399559  0.06288019 -0.05555357  0.11239031 -0.07564677</span><br><span class="line">  0.08233534  0.1478644 ]</span><br><span class="line">--&gt; model size of ofo: 200</span><br><span class="line">--&gt; the type of an element of the ofo: &lt;class &apos;numpy.float32&apos;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期工作&quot;&gt;&lt;a href=&quot;#前期工作&quot; class=&quot;headerlink&quot; title=&quot;前期工作&quot;&gt;&lt;/a&gt;前期工作&lt;/h2&gt;&lt;p&gt;我的目标是利用tenserflow得到一个可以对新闻标题进行准确分类的分类器。&lt;/p&gt;
&lt;p&gt;首先我需要有新闻标题的原始数据
      
    
    </summary>
    
      <category term="机器学习" scheme="http://jshpy.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="word2vec" scheme="http://jshpy.cn/tags/word2vec/"/>
    
  </entry>
  
  <entry>
    <title>Hive常用操作</title>
    <link href="http://jshpy.cn/2018/02/03/:year-:month-:day-:title.html/"/>
    <id>http://jshpy.cn/2018/02/03/:year-:month-:day-:title.html/</id>
    <published>2018-02-03T07:13:02.000Z</published>
    <updated>2018-07-16T09:22:27.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="简单的建表"><a href="#简单的建表" class="headerlink" title="简单的建表"></a>简单的建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line">spec_table_from_textfile(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  table_common <span class="keyword">string</span>,</span><br><span class="line">  column_code <span class="keyword">string</span>,</span><br><span class="line">  column_name <span class="keyword">string</span>,</span><br><span class="line">  column_common <span class="keyword">string</span>)</span><br></pre></td></tr></table></figure><h3 id="从查询结果创建表"><a href="#从查询结果创建表" class="headerlink" title="从查询结果创建表"></a>从查询结果创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table2</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> phone_num,real_name,id_card,create_time </span><br><span class="line"><span class="keyword">from</span> table1 </span><br><span class="line"><span class="keyword">where</span> info_from <span class="keyword">like</span> <span class="string">'%18%'</span></span><br></pre></td></tr></table></figure><h3 id="克隆表"><a href="#克隆表" class="headerlink" title="克隆表"></a>克隆表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">like</span> tablename1</span><br></pre></td></tr></table></figure><ul><li>此处是指克隆表结构，并不会克隆表数据。</li></ul><h3 id="创建从格式化文本文件导入的表"><a href="#创建从格式化文本文件导入的表" class="headerlink" title="创建从格式化文本文件导入的表"></a>创建从格式化文本文件导入的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line">spec_table_from_textfile(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  table_common <span class="keyword">string</span>,</span><br><span class="line">  column_code <span class="keyword">string</span>,</span><br><span class="line">  column_name <span class="keyword">string</span>,</span><br><span class="line">  column_common <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile</span><br></pre></td></tr></table></figure><h3 id="创建-orc-表"><a href="#创建-orc-表" class="headerlink" title="创建 orc 表"></a>创建 orc 表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line">spec_table_orc(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  table_common <span class="keyword">string</span>,</span><br><span class="line">  column_code <span class="keyword">string</span>,</span><br><span class="line">  column_name <span class="keyword">string</span>,</span><br><span class="line">  column_common <span class="keyword">string</span>)</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="keyword">id</span>) <span class="keyword">into</span> <span class="number">3</span> buckets</span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc TBLPROPERTIES (<span class="string">'transactional'</span>=<span class="string">'true'</span>)</span><br></pre></td></tr></table></figure><ul><li>ORC表支持行级delete、updata和insert等操作，但需要配置HIVE相关配置文件，具体操作点击<a href="http://blog.csdn.net/wzy0623/article/details/51483674" target="_blank" rel="noopener">链接</a>。</li></ul><h2 id="导入数据至表"><a href="#导入数据至表" class="headerlink" title="导入数据至表"></a>导入数据至表</h2><p>Hive表接受批量插入，一般不支持逐条记录插入的<code>insert</code>SQL语句。</p><h3 id="从查询数据导入"><a href="#从查询数据导入" class="headerlink" title="从查询数据导入"></a>从查询数据导入</h3><p>若目标表和数据源表的表结构一至：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> xx <span class="keyword">select</span> * <span class="keyword">from</span> xx <span class="keyword">where</span> xxx</span><br></pre></td></tr></table></figure><ul><li>字段数据结构不一致Hive会尝试转换，转换不了的置<code>NULL</code></li></ul><h3 id="导入时指定特殊值"><a href="#导入时指定特殊值" class="headerlink" title="导入时指定特殊值"></a>导入时指定特殊值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">spec_test(</span><br><span class="line">  <span class="keyword">id</span>,</span><br><span class="line">  table_code,</span><br><span class="line">  table_name,</span><br><span class="line">  filed_code,</span><br><span class="line">  filed_name,</span><br><span class="line">  <span class="keyword">category</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> *,<span class="string">'zx'</span></span><br><span class="line"><span class="keyword">from</span> spec_table2</span><br></pre></td></tr></table></figure><ul><li>一种适用的场景是在表合并时，对目标表新增的字段指定来源。</li></ul><h3 id="选择字段导入"><a href="#选择字段导入" class="headerlink" title="选择字段导入"></a>选择字段导入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span></span><br><span class="line">table1(</span><br><span class="line">  wp_id,</span><br><span class="line">  wp_phone,</span><br><span class="line">  wp_email,</span><br><span class="line">  wp_sex,</span><br><span class="line">  wp_birthday)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table2</span><br></pre></td></tr></table></figure><h3 id="从文本文件导入"><a href="#从文本文件导入" class="headerlink" title="从文本文件导入"></a>从文本文件导入</h3><p>如上一小节<strong>创建从格式化文本文件导入的表</strong>，对应的建表后可在<code>hive-shell</code>中指定文本文件路径导入，需要注意的是文本文件中字段和字段之间的分隔符必须和建表语句中指定的一至：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="built_in">local</span> inpath <span class="string">'/home/hive/zx/spec_table_from_textfile.txt'</span> into table spec_table_from_textfile</span><br></pre></td></tr></table></figure><h2 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h2><p>与常见的SQL查询语句类似：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> spec_table <span class="keyword">where</span> table_name <span class="keyword">like</span> <span class="string">'xx%'</span> <span class="keyword">and</span> table_name <span class="keyword">like</span> <span class="string">'00%'</span> <span class="keyword">limit</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改名"><a href="#修改名" class="headerlink" title="修改名"></a>修改名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">name</span> old_name <span class="keyword">to</span> new_name</span><br></pre></td></tr></table></figure><h3 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> spec_table2 <span class="keyword">add</span> <span class="keyword">columns</span> (<span class="keyword">category</span> <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><ul><li>在尾部增加</li></ul><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> spec_table2</span><br><span class="line"><span class="keyword">replace</span> <span class="keyword">columns</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>,</span><br><span class="line">  table_code <span class="keyword">string</span>,</span><br><span class="line">  table_name <span class="keyword">string</span>,</span><br><span class="line">  filed_code <span class="keyword">string</span>,</span><br><span class="line">  filed_name <span class="keyword">string</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>注：这个语句只是修改表结构并不会对数据进行操作，如果表中已经存在数据，你删除一个字段后再恢复会发现数据还在，同样如果你改变字段顺序，会发现数据错位了。</p><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> xx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;h3 id=&quot;简单的建表&quot;&gt;&lt;a href=&quot;#简单的建表&quot; class=&quot;headerlink&quot; title=&quot;简单的建表&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="大数据" scheme="http://jshpy.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hive" scheme="http://jshpy.cn/tags/Hive/"/>
    
      <category term="SQL" scheme="http://jshpy.cn/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS 环境搭建</title>
    <link href="http://jshpy.cn/2018/01/16/:year-:month-:day-:title.html/"/>
    <id>http://jshpy.cn/2018/01/16/:year-:month-:day-:title.html/</id>
    <published>2018-01-16T15:33:06.000Z</published>
    <updated>2018-07-16T09:22:30.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><ol><li>登录阿里云管理控制台</li><li>CA证书服务 -&gt; 购买证书</li><li>选择 <code>免费型DV SSL</code> 品牌 <code>Symantec</code></li><li>购买 -&gt; 支付</li><li>回到<code>步骤2</code>证书服务控制台</li><li>补全域名信息</li><li>等待审核成功</li></ol><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><ol><li>登录证书服务控制台，找到到对应证书点击<code>下载</code>。</li><li>得到两个证书文件：<code>214448811130415.key</code>、 <code>214448811130415.pem</code></li><li>在Nginx安装目录下创建一个文件夹将其放入，我这里是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Guitar cert]# pwd</span><br><span class="line">/etc/nginx/cert</span><br><span class="line">[root@Guitar cert]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 1679 Jan 16 22:20 213989769950415.key</span><br><span class="line">-rw-r--r-- 1 root root 3297 Jan 16 22:20 213989769950415.pem</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改配置文件-nginx-conf"><a href="#修改配置文件-nginx-conf" class="headerlink" title="修改配置文件 nginx.conf"></a>修改配置文件 nginx.conf</h2><p>将原来注释的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#    listen       443 ssl;</span></span><br><span class="line"><span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line"><span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    location / &#123;</span></span><br><span class="line"><span class="comment">#        root   html;</span></span><br><span class="line"><span class="comment">#        index  index.html index.htm;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  api.xiuni.club;</span><br><span class="line">    ssl          on;</span><br><span class="line">    root /wechat/www;</span><br><span class="line">    index index.html; </span><br><span class="line">    ssl_certificate   /etc/nginx/cert/213989769950415.pem;</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/213989769950415.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        root /wechat/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理静态资源:</span></span><br><span class="line">    location ~ ^\/static\/.*$ &#123;</span><br><span class="line">        root /wechat/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 动态请求转发到9000端口:</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment">#     proxy_pass       http://127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header Host $host;</span></span><br><span class="line">    <span class="comment">#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到刚才上传的证书文件路径也要对应的配置上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate   /etc/nginx/cert/213989769950415.pem;</span><br><span class="line">ssl_certificate_key  /etc/nginx/cert/213989769950415.key;</span><br></pre></td></tr></table></figure><ul><li>也可以根据再自己的情况添加必要的配置</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>重启Nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>在浏览器中输入<code>https://your.domain.com</code> 可以正常发起https请求</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;申请证书&quot;&gt;&lt;a href=&quot;#申请证书&quot; class=&quot;headerlink&quot; title=&quot;申请证书&quot;&gt;&lt;/a&gt;申请证书&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;登录阿里云管理控制台&lt;/li&gt;
&lt;li&gt;CA证书服务 -&amp;gt; 购买证书&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;
      
    
    </summary>
    
      <category term="WEB" scheme="http://jshpy.cn/categories/WEB/"/>
    
    
      <category term="HTTPS" scheme="http://jshpy.cn/tags/HTTPS/"/>
    
      <category term="证书" scheme="http://jshpy.cn/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy实用技巧</title>
    <link href="http://jshpy.cn/2017/12/28/:year-:month-:day-:title.html/"/>
    <id>http://jshpy.cn/2017/12/28/:year-:month-:day-:title.html/</id>
    <published>2017-12-27T16:00:00.000Z</published>
    <updated>2018-07-16T09:22:42.074Z</updated>
    
    <content type="html"><![CDATA[<p>在使用scrapy过程中总结了一些小技巧，在此分享出来供大家参考。</p><h2 id="用-LinkExtractor-收取链接"><a href="#用-LinkExtractor-收取链接" class="headerlink" title="用 LinkExtractor 收取链接"></a>用 LinkExtractor 收取链接</h2><p>以 <a href="http://www.hao123.com/sitemap" target="_blank" rel="noopener">http://www.hao123.com/sitemap</a> 为例子：</p><p>在shell中运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://www.hao123.com/sitemap</span><br></pre></td></tr></table></figure><p>进入shell调试模式，我们来看看使用linkextractors的效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>links = LinkExtractor(allow=(), restrict_xpaths=(<span class="string">'//a[@class="link"]'</span>)).extract_links(response)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(links)</span><br><span class="line"><span class="number">113</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> link <span class="keyword">in</span> links[:<span class="number">10</span>]:</span><br><span class="line"><span class="meta">... </span>    print(link.text.replace(<span class="string">'\n'</span>,<span class="string">''</span>),<span class="string">':'</span>,link.url)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line">天气 : http://tianqi.hao123.com/</span><br><span class="line">万年历 : http://www.hao123.com/rili</span><br><span class="line">地图 : http://www.hao123.com/map</span><br><span class="line">查询 : http://life.hao123.com/info</span><br><span class="line">生活 : http://www.hao123.com/shenghuo</span><br><span class="line">hao到家 : http://life.hao123.com/</span><br><span class="line">美食菜谱 : http://www.hao123.com/menu</span><br><span class="line">特价 : http://tejia.hao123.com/?tn=kztj</span><br><span class="line">购物 : http://gouwu.hao123.com/</span><br><span class="line">团购 : https://www.nuomi.com/?utm_source=hao123&amp;utm_medium=channel_midright&amp;cid=001606</span><br></pre></td></tr></table></figure><p>利用Xpath，可以很方便的获取到链接的文本和URL</p><h2 id="命令行调试代码"><a href="#命令行调试代码" class="headerlink" title="命令行调试代码"></a>命令行调试代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line">inspect_response(response, self)</span><br></pre></td></tr></table></figure><p>在需要调试的地方插入此代码，程序运行过程中会停在该处，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2018-05-28 10:29:14 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2018-05-28 10:29:14 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">&gt;&gt;&gt; [s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x10549dfd0&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET https://movie.douban.com/chart&gt;</span><br><span class="line">[s]   response   &lt;200 https://movie.douban.com/chart&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x10549def0&gt;</span><br><span class="line">[s]   spider     &lt;TestSpider &apos;test&apos; at 0x1055e1748&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   view(response)    View response in a browser</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>此时可以针对返回的<code>response</code>进行调试工作。</p><h2 id="重写-start-requests-方法"><a href="#重写-start-requests-方法" class="headerlink" title="重写 start_requests 方法"></a>重写 start_requests 方法</h2><p>我们知道在编写spider的时候都有一个初始URL列表，也即<code>start_urls</code>，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackOverflowSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'stackoverflow'</span></span><br><span class="line">    start_urls = [<span class="string">'http://stackoverflow.com/questions?sort=votes'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.question-summary h3 a::attr(href)'</span>):</span><br><span class="line">            full_url = response.urljoin(href.extract())</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(full_url, callback=self.parse_question)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_question</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'title'</span>: response.css(<span class="string">'h1 a::text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'votes'</span>: response.css(<span class="string">'.question .vote-count-post::text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'body'</span>: response.css(<span class="string">'.question .post-text'</span>).extract()[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'tags'</span>: response.css(<span class="string">'.question .post-tag::text'</span>).extract(),</span><br><span class="line">            <span class="string">'link'</span>: response.url,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>但有时我们希望灵活的把初始URL分配给不同的回调函数，这时我们可以重写<code>Spider</code>类的<code>start_requests</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    ershoufang = <span class="string">"https://nj.5i5j.com/ershoufang/o6/"</span></span><br><span class="line">    zufang = <span class="string">"https://nj.5i5j.com/zufang/o6/"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> Request(ershoufang, callback=self.parse_ershoufang,dont_filter = <span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">yield</span> Request(zufang, callback=self.parse_zufang,dont_filter = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>当然你还可以基于这个方法做一个URL和parse的映射，这样就可以在一个爬虫下处理不同类型的页面。</p><h2 id="Request-meta-特殊键"><a href="#Request-meta-特殊键" class="headerlink" title="Request.meta 特殊键"></a>Request.meta 特殊键</h2><p><code>Request.meta</code>属性可以包含任何任意数据，也就意味着除了<code>Scrapy</code>及其内置扩展的一些特殊键，我们可以自定义一些对我们有用的键用于在请求和响应间传递，拿官方示例的 <code>cookiejar</code> 来说。</p><p>Scrapy通过使用 cookiejar Request meta key来支持单spider追踪多cookie session。 默认情况下其使用一个cookie jar(session)，不过您可以传递一个标示符来使用多个。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, url <span class="keyword">in</span> enumerate(urls):</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(<span class="string">"http://www.example.com"</span>, meta=&#123;<span class="string">'cookiejar'</span>: i&#125;,</span><br><span class="line">        callback=self.parse_page)</span><br></pre></td></tr></table></figure><p>需要注意的是 cookiejar meta key不是”黏性的(sticky)”。 您需要在之后的request请求中接着传递。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="comment"># do some processing</span></span><br><span class="line">    <span class="keyword">return</span> scrapy.Request(<span class="string">"http://www.example.com/otherpage"</span>,</span><br><span class="line">        meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>]&#125;,</span><br><span class="line">        callback=self.parse_other_page)</span><br></pre></td></tr></table></figure><p>具体如何使用，就看你的想象力啦。</p><h2 id="给请求添加代理（中间件）"><a href="#给请求添加代理（中间件）" class="headerlink" title="给请求添加代理（中间件）"></a>给请求添加代理（中间件）</h2><p>爬虫不可避免的需要使用代理，我们通过下载器中间件，截获发出的请求把代理信息添加进去。</p><p>以阿布云为例，首先我们需要编辑项目下的<code>middlewares.py</code>文件，新建一个代理中间件类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务器</span></span><br><span class="line">proxyServer = <span class="string">"http://http-dyn.abuyun.com:9020"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理隧道验证信息</span></span><br><span class="line">proxyUser = <span class="string">"H01234567890123D"</span></span><br><span class="line">proxyPass = <span class="string">"0123456789012345"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python2</span></span><br><span class="line"><span class="comment"># proxyAuth = "Basic " + base64.b64encode(proxyUser + ":" + proxyPass)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python3</span></span><br><span class="line">proxyAuth = <span class="string">"Basic "</span> + base64.urlsafe_b64encode(bytes((proxyUser + <span class="string">":"</span> + proxyPass), <span class="string">"ascii"</span>)).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.meta[<span class="string">"proxy"</span>] = proxyServer</span><br><span class="line"></span><br><span class="line">        request.headers[<span class="string">"Proxy-Authorization"</span>] = proxyAuth</span><br></pre></td></tr></table></figure><p>在重写的<code>process_request</code>方法中，我们将必要的信息添加给即将发出的request。</p><p>然后我们还需要在 <code>settings.py</code> 文件中使能我们自定义的代理中间件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'myproject.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们发出的请求scrapy就会自动为我们添加代理信息了。</p><h2 id="Scrapy-动态调试和启动多爬虫"><a href="#Scrapy-动态调试和启动多爬虫" class="headerlink" title="Scrapy 动态调试和启动多爬虫"></a>Scrapy 动态调试和启动多爬虫</h2><p>参见我之前的一篇<a href="http://jshpy.cn/2018/04/15/scrapy%E5%90%AF%E5%8A%A8%E5%A4%9A%E7%88%AC%E8%99%AB/">文章</a></p><h2 id="…-…"><a href="#…-…" class="headerlink" title="… …"></a>… …</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用scrapy过程中总结了一些小技巧，在此分享出来供大家参考。&lt;/p&gt;
&lt;h2 id=&quot;用-LinkExtractor-收取链接&quot;&gt;&lt;a href=&quot;#用-LinkExtractor-收取链接&quot; class=&quot;headerlink&quot; title=&quot;用 LinkExtra
      
    
    </summary>
    
      <category term="爬虫" scheme="http://jshpy.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="http://jshpy.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy实现动态调试和同时启动多个爬虫</title>
    <link href="http://jshpy.cn/2017/12/15/:year-:month-:day-:title.html/"/>
    <id>http://jshpy.cn/2017/12/15/:year-:month-:day-:title.html/</id>
    <published>2017-12-14T16:00:00.000Z</published>
    <updated>2018-07-16T09:22:38.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般启动方式"><a href="#一般启动方式" class="headerlink" title="一般启动方式"></a>一般启动方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spider_name</span><br></pre></td></tr></table></figure><p>命令行启动好处是灵活方便, 可以通过传递参数的形式控制爬虫的行为和输出。</p><blockquote><p>参见<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html#id3" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>比如你可以配置爬虫采集到数据的输出方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl dmoz -o items.json</span><br></pre></td></tr></table></figure></p><p>但是它的缺点也很明显:</p><ul><li>原子性太强，不方便动态调试代码</li><li>当需要启动多个爬虫时，不方便操作</li></ul><h2 id="新的思路"><a href="#新的思路" class="headerlink" title="新的思路"></a>新的思路</h2><p>我们知道<code>Scrapy</code>是基于Twisted实现的爬虫框架, 因此我们可以通过引入<code>reactor</code>来启动我们的爬虫。</p><p>为了方便理解，我把的项目结构展示出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── learn_scrapy</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── test.py</span><br><span class="line">├── debug.py</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure><p>我在项目根目录下新建了文件 <code>debug.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> configure_logging</span><br><span class="line"><span class="comment"># 引入spider</span></span><br><span class="line"><span class="keyword">from</span> learn_scrapy.spiders.test <span class="keyword">import</span> TestSpider</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">settings = get_project_settings()</span><br><span class="line">configure_logging(settings)</span><br><span class="line">runner = CrawlerRunner(settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 装载爬虫</span></span><br><span class="line">    runner.crawl(TestSpider)</span><br><span class="line">    <span class="comment"># 如果有多个爬虫需要启动可以一直装载下去</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider2)</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider3)</span></span><br><span class="line">    <span class="comment"># runner.crawl(TestSpider4)</span></span><br><span class="line">    <span class="comment"># ... ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 爬虫结束后停止事件循环</span></span><br><span class="line">    d = runner.join()</span><br><span class="line">    d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动事件循环</span></span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start_spider()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行这个文件<code>python3 debug.py</code>就可以启动爬虫。</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>在IDE下选择启动debug：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/debug_scrapy.png" alt=""></p><p>可以看到程序停在了断点处，可以很方便的查看程序运行时的堆栈和变量信息：</p><p><img src="https://hexo-1256263757.cos.ap-beijing.myqcloud.com/debug_scrapy2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一般启动方式&quot;&gt;&lt;a href=&quot;#一般启动方式&quot; class=&quot;headerlink&quot; title=&quot;一般启动方式&quot;&gt;&lt;/a&gt;一般启动方式&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="爬虫" scheme="http://jshpy.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Scrapy" scheme="http://jshpy.cn/tags/Scrapy/"/>
    
      <category term="Python3" scheme="http://jshpy.cn/tags/Python3/"/>
    
  </entry>
  
</feed>
